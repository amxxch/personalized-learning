{
  "title": "C++ Programming Fundamentals",
  "skills": [
    {
      "skillName": "Introduction to C++ and Your First Program",
      "skillOrder": 1,
      "difficulty": "EASY",
      "lessonBubbles": [
        {
          "bubbleOrder": 1,
          "content": "**Welcome to C++**\n\nC++ is a **powerful**, high-performance programming language widely used in:\n\n- System software\n- Game engines\n- Embedded systems\n- Real-time applications\n\nIt supports both **procedural** and **object-oriented** programming paradigms, making it flexible for different kinds of projects.",
          "contentType": "TEXT",
          "difficulty": "EASY",
          "topic": "What is C++?"
        },
        {
          "bubbleOrder": 2,
          "content": "**Setting Up Your C++ Environment**\n\nTo run C++ code, you need a compiler and an editor or IDE. Here are your options:\n\n- **Compiler**: `g++`, `clang++`, or MSVC\n- **IDEs**: Visual Studio, Code::Blocks, or even online IDEs like Replit\n\nC++ files typically use the `.cpp` extension.\n\n**Example Compilation (using g++):**\n```sh\ng++ hello.cpp -o hello\n./hello\n```",
          "contentType": "TEXT",
          "difficulty": "EASY",
          "topic": "Setup"
        },
        {
          "bubbleOrder": 3,
          "content": "**The `main()` Function**\n\nEvery C++ program starts with a function called `main()`. This is the **entry point** of execution.\n\n```cpp\nint main() {\n    // code goes here\n    return 0;\n}\n```\n\nThe `return 0;` indicates that the program ended successfully.",
          "contentType": "TEXT",
          "difficulty": "EASY",
          "topic": "main() Function"
        },
        {
          "bubbleOrder": 4,
          "content": "**Hello, World Example**\n\nHere's a simple complete C++ program that prints \"Hello, World!\":\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n    cout << \"Hello, World!\" << endl;\n    return 0;\n}\n```",
          "contentType": "TEXT",
          "difficulty": "EASY",
          "topic": "First Program Example"
        },
        {
          "bubbleOrder": 5,
          "content": "**Explaining the Code**\n\n- `#include <iostream>` brings in the Input/Output library.\n- `using namespace std;` avoids prefixing with `std::`.\n- `cout <<` prints to console.\n- `endl` inserts a newline.\n- `return 0;` exits the program successfully.",
          "contentType": "TEXT",
          "difficulty": "EASY",
          "topic": "Code Breakdown"
        },
        {
          "bubbleOrder": 6,
          "content": "**C++ Syntax Basics**\n\n- Every statement ends with a **semicolon `;`**\n- Code blocks are wrapped in **curly braces `{}`**\n- Whitespaces and indentation are ignored by the compiler but help humans read the code\n\nThese conventions are important for writing clean, correct code.",
          "contentType": "TEXT",
          "difficulty": "EASY",
          "topic": "Syntax"
        },
        {
          "bubbleOrder": 7,
          "content": "**Modifying Hello World**\n\nTry modifying the Hello World program to print multiple lines:\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n    cout << \"Line 1\\n\";\n    cout << \"Line 2\\n\";\n    return 0;\n}\n```\n\nYou can also use `\\t` for tabs and escape quotes with `\\\"`.",
          "contentType": "TEXT",
          "difficulty": "MEDIUM",
          "topic": "Multi-line Output"
        },
        {
          "bubbleOrder": 8,
          "content": "**Return Codes**\n\nThe `main()` function can return different values:\n\n- `return 0;` → successful execution\n- `return 1;` or other codes can indicate different kinds of errors\n\nYou can use this to pass status to the system or calling processes.",
          "contentType": "TEXT",
          "difficulty": "MEDIUM",
          "topic": "Return Values"
        },
        {
          "bubbleOrder": 9,
          "content": "**Using Comments**\n\nC++ supports two styles of comments:\n\n```cpp\n// This is a single-line comment\n/* This is a\n   multi-line comment */\n```\n\nUse comments to explain your code and make it easier to maintain.",
          "contentType": "TEXT",
          "difficulty": "MEDIUM",
          "topic": "Comments"
        },
        {
          "bubbleOrder": 10,
          "content": "**Debugging a Broken Program**\n\nCan you spot the mistake in this code?\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n    cout << \"Hello, World!\" << endl\n    return 0\n}\n```\n\n**Hint**: What’s missing?**\n\n- Semicolons are required after statements.",
          "contentType": "TEXT",
          "difficulty": "HARD",
          "topic": "Debugging"
        },
        {
          "bubbleOrder": 11,
          "content": "**What Happens Without main?**\n\nWhat if your program doesn’t have a `main()` function? Try removing it and compiling.\n\nThe compiler will raise an error because `main()` is required for execution.",
          "contentType": "TEXT",
          "difficulty": "HARD",
          "topic": "Missing Entry Point"
        },
        {
          "bubbleOrder": 12,
          "content": "**Using ```cpp\nint main(int argc, char** argv)```**\n\n`main()` can also be written like this:\n\n```cpp\nint main(int argc, char** argv)\n```\n\nThis version allows access to command-line arguments. Useful for building command-line tools and taking input from scripts.",
          "contentType": "TEXT",
          "difficulty": "HARD",
          "topic": "Advanced main() Signature"
        }
      ],
      "quizQuestions": [
        {
          "difficulty": "EASY",
          "question": "What is the correct extension for C++ source files?",
          "expectedAnswer": "A",
          "explanation": "C++ source files typically use the `.cpp` extension.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": ".cpp"
            },
            {
              "choiceLetter": "B",
              "content": ".c"
            },
            {
              "choiceLetter": "C",
              "content": ".java"
            },
            {
              "choiceLetter": "D",
              "content": ".py"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "Which function is the entry point of every C++ program?",
          "expectedAnswer": "C",
          "explanation": "`main()` is where execution begins in a C++ program.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "start()"
            },
            {
              "choiceLetter": "B",
              "content": "init()"
            },
            {
              "choiceLetter": "C",
              "content": "main()"
            },
            {
              "choiceLetter": "D",
              "content": "run()"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "What is the purpose of `cout` in C++?",
          "expectedAnswer": "D",
          "explanation": "`cout` is used for printing output to the console.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Read from file"
            },
            {
              "choiceLetter": "B",
              "content": "Take input"
            },
            {
              "choiceLetter": "C",
              "content": "Compile code"
            },
            {
              "choiceLetter": "D",
              "content": "Print to console"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "Which symbol ends most statements in C++?",
          "expectedAnswer": "B",
          "explanation": "Each C++ statement should end with a semicolon.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": ":"
            },
            {
              "choiceLetter": "B",
              "content": ";"
            },
            {
              "choiceLetter": "C",
              "content": "."
            },
            {
              "choiceLetter": "D",
              "content": "#"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "Which header must be included to use `cout`?",
          "expectedAnswer": "A",
          "explanation": "`<iostream>` is the header file for `cout` and `cin`.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "#include <iostream>"
            },
            {
              "choiceLetter": "B",
              "content": "#include <string>"
            },
            {
              "choiceLetter": "C",
              "content": "#include <stdio.h>"
            },
            {
              "choiceLetter": "D",
              "content": "#include <output>"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "What does `return 0;` do in `main()`?",
          "expectedAnswer": "A",
          "explanation": "It signals to the system that the program finished successfully.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Indicates success"
            },
            {
              "choiceLetter": "B",
              "content": "Prints output"
            },
            {
              "choiceLetter": "C",
              "content": "Declares a variable"
            },
            {
              "choiceLetter": "D",
              "content": "Initializes input"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "Which line correctly prints `Hello` and `World`?",
          "expectedAnswer": "B",
          "explanation": "The `<<` operator is used to chain output in C++.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "print('Hello', 'World')"
            },
            {
              "choiceLetter": "B",
              "content": "cout << \"Hello\" << \" World!\";"
            },
            {
              "choiceLetter": "C",
              "content": "echo 'Hello World'"
            },
            {
              "choiceLetter": "D",
              "content": "Console.WriteLine(\"Hello World\")"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "Which command compiles a C++ file using g++?",
          "expectedAnswer": "C",
          "explanation": "You must specify the output file with `-o`.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "g++ file.cpp"
            },
            {
              "choiceLetter": "B",
              "content": "compile file.cpp"
            },
            {
              "choiceLetter": "C",
              "content": "g++ file.cpp -o file"
            },
            {
              "choiceLetter": "D",
              "content": "build file.cpp"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "What does `endl` do in C++?",
          "expectedAnswer": "A",
          "explanation": "`endl` moves to the next line and flushes the buffer.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Inserts a newline and flushes output"
            },
            {
              "choiceLetter": "B",
              "content": "Ends the loop"
            },
            {
              "choiceLetter": "C",
              "content": "Terminates the program"
            },
            {
              "choiceLetter": "D",
              "content": "Clears input buffer"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "Which of these is a valid complete C++ program?",
          "expectedAnswer": "D",
          "explanation": "Only D has correct function syntax and structure.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "#include <iostream>"
            },
            {
              "choiceLetter": "B",
              "content": "int main { return 0; }"
            },
            {
              "choiceLetter": "C",
              "content": "cout << 'Hello';"
            },
            {
              "choiceLetter": "D",
              "content": "int main() { return 0; }"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "Which is a valid `main()` signature with arguments?",
          "expectedAnswer": "C",
          "explanation": "`int main(int argc, char** argv)` gives argument access.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "main(int argv, char argc)"
            },
            {
              "choiceLetter": "B",
              "content": "main() int"
            },
            {
              "choiceLetter": "C",
              "content": "int main(int argc, char** argv)"
            },
            {
              "choiceLetter": "D",
              "content": "start()"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "What happens if `main()` is missing?",
          "expectedAnswer": "B",
          "explanation": "The program cannot run without a `main()` function.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Nothing"
            },
            {
              "choiceLetter": "B",
              "content": "Compiler error"
            },
            {
              "choiceLetter": "C",
              "content": "Runs but no output"
            },
            {
              "choiceLetter": "D",
              "content": "Warnings only"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "Which is a correct single-line comment?",
          "expectedAnswer": "D",
          "explanation": "`//` is used for single-line comments.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "# comment"
            },
            {
              "choiceLetter": "B",
              "content": "-- comment"
            },
            {
              "choiceLetter": "C",
              "content": "/* comment */"
            },
            {
              "choiceLetter": "D",
              "content": "// comment"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "What will this output?\n```cpp\ncout << Hello;\n```",
          "expectedAnswer": "B",
          "explanation": "`Hello` must be in quotes or declared.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Hello"
            },
            {
              "choiceLetter": "B",
              "content": "Error"
            },
            {
              "choiceLetter": "C",
              "content": "Prints variable"
            },
            {
              "choiceLetter": "D",
              "content": "Nothing"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "Which return value indicates a successful program exit?",
          "expectedAnswer": "A",
          "explanation": "`return 0;` is the standard success signal.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "0"
            },
            {
              "choiceLetter": "B",
              "content": "-1"
            },
            {
              "choiceLetter": "C",
              "content": "null"
            },
            {
              "choiceLetter": "D",
              "content": "1"
            }
          ]
        }
      ],
      "codingExercises": [
        {
          "title": "Print Hello World",
          "task": "Write a program that prints `Hello, World!` to the console.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    // Your code here\n    return 0;\n}",
          "difficulty": "EASY",
          "testCases": [
            {
              "input": "",
              "output": "Hello, World!\n"
            }
          ],
          "hint": "Use cout to print a string followed by a newline."
        },
        {
          "title": "Print Your Name",
          "task": "Write a program that prints your full name on a new line.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    // Your code here\n    return 0;\n}",
          "difficulty": "EASY",
          "testCases": [
            {
              "input": "",
              "output": "John Doe\n"
            }
          ],
          "hint": "Just use cout and include a newline character (\\n)."
        },
        {
          "title": "Display an Integer",
          "task": "Write a program that takes an integer input and prints it back.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int number;\n    // Your code here\n    return 0;\n}",
          "difficulty": "EASY",
          "testCases": [
            {
              "input": "42",
              "output": "42\n"
            },
            {
              "input": "123",
              "output": "123\n"
            },
            {
              "input": "-5",
              "output": "-5\n"
            },
            {
              "input": "0",
              "output": "0\n"
            },
            {
              "input": "1000",
              "output": "1000\n"
            }
          ],
          "hint": "Use cin to input an integer and cout to print it."
        },
        {
          "title": "Sum of Two Numbers",
          "task": "Write a program that reads two integers and prints their sum.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int a, b;\n    // Your code here\n    return 0;\n}",
          "difficulty": "MEDIUM",
          "testCases": [
            {
              "input": "7 8",
              "output": "15\n"
            },
            {
              "input": "0 0",
              "output": "0\n"
            },
            {
              "input": "100 -50",
              "output": "50\n"
            },
            {
              "input": "-3 -7",
              "output": "-10\n"
            },
            {
              "input": "123 456",
              "output": "579\n"
            }
          ],
          "hint": "Read two integers with cin, add them, and print the result with cout."
        },
        {
          "title": "Area of a Rectangle",
          "task": "Write a program that reads the width and height of a rectangle and prints its area.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int width, height;\n    // Your code here\n    return 0;\n}",
          "difficulty": "MEDIUM",
          "testCases": [
            {
              "input": "4 5",
              "output": "20\n"
            },
            {
              "input": "10 2",
              "output": "20\n"
            },
            {
              "input": "7 3",
              "output": "21\n"
            },
            {
              "input": "6 6",
              "output": "36\n"
            },
            {
              "input": "0 100",
              "output": "0\n"
            }
          ],
          "hint": "Multiply width and height to get area using the * operator."
        },
        {
          "title": "Print ASCII Value",
          "task": "Write a program that takes a single character as input and prints its ASCII value.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    char ch;\n    // Your code here\n    return 0;\n}",
          "difficulty": "MEDIUM",
          "testCases": [
            {
              "input": "A",
              "output": "65\n"
            },
            {
              "input": "a",
              "output": "97\n"
            },
            {
              "input": "Z",
              "output": "90\n"
            },
            {
              "input": "z",
              "output": "122\n"
            },
            {
              "input": "0",
              "output": "48\n"
            }
          ],
          "hint": "Use int() conversion or implicit cast to print ASCII value of a character."
        },
        {
          "title": "Simple Calculator",
          "task": "Write a program that reads two integers and an operator (+, -, *, /) and prints the result.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int a, b;\n    char op;\n    // Your code here\n    return 0;\n}",
          "difficulty": "HARD",
          "testCases": [
            {
              "input": "7 3 +",
              "output": "10\n"
            },
            {
              "input": "9 4 -",
              "output": "5\n"
            },
            {
              "input": "5 5 *",
              "output": "25\n"
            },
            {
              "input": "20 5 /",
              "output": "4\n"
            },
            {
              "input": "8 2 /",
              "output": "4\n"
            }
          ],
          "hint": "Use a switch or if-else statement to handle +, -, *, /."
        },
        {
          "title": "Swap Two Numbers",
          "task": "Write a program that reads two integers and swaps them using a temporary variable. Print them after swapping.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int a, b;\n    // Your code here\n    return 0;\n}",
          "difficulty": "HARD",
          "testCases": [
            {
              "input": "1 2",
              "output": "2 1\n"
            },
            {
              "input": "100 200",
              "output": "200 100\n"
            },
            {
              "input": "0 5",
              "output": "5 0\n"
            },
            {
              "input": "-1 -2",
              "output": "-2 -1\n"
            },
            {
              "input": "50 50",
              "output": "50 50\n"
            }
          ],
          "hint": "Use a temporary variable to hold one value during the swap."
        },
        {
          "title": "Integer Overflow Demo",
          "task": "Write a program that multiplies two large integers and prints the result. Use `long long` for large values.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    long long a, b;\n    // Your code here\n    return 0;\n}",
          "difficulty": "HARD",
          "testCases": [
            {
              "input": "100000 100000",
              "output": "10000000000\n"
            },
            {
              "input": "123456 987654",
              "output": "121931812224\n"
            },
            {
              "input": "0 123456",
              "output": "0\n"
            },
            {
              "input": "1 999999999",
              "output": "999999999\n"
            },
            {
              "input": "50000 200000",
              "output": "10000000000\n"
            }
          ],
          "hint": "Use cin to input an integer and cout to print it."
        }
      ]
    },
    {
      "skillName": "Data Types, Variables, and Constants",
      "skillOrder": 2,
      "difficulty": "EASY",
      "lessonBubbles": [
        {
          "bubbleOrder": 1,
          "content": "**What Are Data Types?**\n\nIn C++, every variable must have a data type. A data type tells the compiler what kind of data the variable will hold.\n\nExamples:\n- `int` for integers\n- `float` or `double` for decimals\n- `char` for single characters\n- `bool` for true/false values",
          "contentType": "TEXT",
          "difficulty": "EASY",
          "topic": "Basic Data Types"
        },
        {
          "bubbleOrder": 2,
          "content": "**Declaring Variables**\n\nA variable is a named container for storing a value. You must declare its type first:\n\n```cpp\nint age = 25;\nfloat weight = 62.5;\nchar grade = 'A';\n```\n\nYou can also declare without assigning a value:\n```cpp\nint score;\n```",
          "contentType": "TEXT",
          "difficulty": "EASY",
          "topic": "Variable Declaration"
        },
        {
          "bubbleOrder": 3,
          "content": "**Multiple Declarations**\n\nYou can declare multiple variables of the same type in one line:\n\n```cpp\nint x = 1, y = 2, z = 3;\n```",
          "contentType": "TEXT",
          "difficulty": "EASY",
          "topic": "Multiple Variables"
        },
        {
          "bubbleOrder": 4,
          "content": "**Integer vs. Floating Point**\n\n- `int` stores whole numbers\n- `float` and `double` store decimal numbers\n- `double` is more precise than `float`\n\n```cpp\nint count = 7;\ndouble price = 99.95;\n```",
          "contentType": "TEXT",
          "difficulty": "MEDIUM",
          "topic": "Numeric Types"
        },
        {
          "bubbleOrder": 5,
          "content": "**Characters and Booleans**\n\n- `char` stores a single character (enclosed in single quotes): `'A'`\n- `bool` stores `true` or `false`\n\n```cpp\nchar grade = 'B';\nbool passed = true;\n```",
          "contentType": "TEXT",
          "difficulty": "MEDIUM",
          "topic": "char and bool"
        },
        {
          "bubbleOrder": 6,
          "content": "**The `auto` Keyword**\n\nC++ can infer the type automatically:\n```cpp\nauto x = 10;     // int\nauto y = 5.5;    // double\nauto ch = 'A';   // char\n```\n\n`auto` is convenient, but in learning stages, writing types explicitly improves understanding.",
          "contentType": "TEXT",
          "difficulty": "MEDIUM",
          "topic": "Type Inference"
        },
        {
          "bubbleOrder": 7,
          "content": "**Constants**\n\nUse the `const` keyword to declare a value that doesn\u2019t change:\n```cpp\nconst double PI = 3.14159;\n```\n\nTrying to change a constant will result in a compile-time error.",
          "contentType": "TEXT",
          "difficulty": "MEDIUM",
          "topic": "Constants"
        },
        {
          "bubbleOrder": 8,
          "content": "**Common Mistakes**\n\nThese are incorrect:\n```cpp\nint x = \"hello\";      // wrong type\nchar c = 'Hello';      // more than one character\nbool b = 5;            // not strictly true/false\n```\n\nWatch for type mismatches and invalid assignments.",
          "contentType": "TEXT",
          "difficulty": "HARD",
          "topic": "Type Errors"
        },
        {
          "bubbleOrder": 9,
          "content": "**Memory Usage**\n\nDifferent data types consume different amounts of memory:\n- `int`: 4 bytes\n- `double`: 8 bytes\n- `char`: 1 byte\n\nYou can use `sizeof()` to find this:\n```cpp\ncout << sizeof(int);\n```",
          "contentType": "TEXT",
          "difficulty": "HARD",
          "topic": "Memory Considerations"
        },
        {
          "bubbleOrder": 10,
          "content": "**Type Conversions**\n\nC++ supports implicit and explicit conversions:\n```cpp\nint x = 5;\ndouble y = x; // implicit\n\nfloat z = (float)x; // explicit cast\n```\n\nUse caution: converting from float to int will lose decimal precision.",
          "contentType": "TEXT",
          "difficulty": "HARD",
          "topic": "Type Casting"
        }
      ],
      "quizQuestions": [
        {
          "difficulty": "EASY",
          "question": "Which type stores whole numbers?",
          "expectedAnswer": "A",
          "explanation": "`int` holds whole numbers.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "int"
            },
            {
              "choiceLetter": "B",
              "content": "float"
            },
            {
              "choiceLetter": "C",
              "content": "char"
            },
            {
              "choiceLetter": "D",
              "content": "bool"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "Which type holds true or false?",
          "expectedAnswer": "D",
          "explanation": "`bool` stores true/false.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "char"
            },
            {
              "choiceLetter": "B",
              "content": "float"
            },
            {
              "choiceLetter": "C",
              "content": "int"
            },
            {
              "choiceLetter": "D",
              "content": "bool"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "Which declaration is valid?",
          "expectedAnswer": "B",
          "explanation": "`float` is valid with decimal.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "int x = 'hello';"
            },
            {
              "choiceLetter": "B",
              "content": "float x = 3.5;"
            },
            {
              "choiceLetter": "C",
              "content": "char c = hello;"
            },
            {
              "choiceLetter": "D",
              "content": "bool x = 1.0;"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "Which keyword defines a constant?",
          "expectedAnswer": "C",
          "explanation": "`const` prevents reassignment.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "var"
            },
            {
              "choiceLetter": "B",
              "content": "final"
            },
            {
              "choiceLetter": "C",
              "content": "const"
            },
            {
              "choiceLetter": "D",
              "content": "static"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "What does `auto` do?",
          "expectedAnswer": "D",
          "explanation": "`auto` lets compiler deduce type.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Declares nothing"
            },
            {
              "choiceLetter": "B",
              "content": "Changes type"
            },
            {
              "choiceLetter": "C",
              "content": "Deletes variable"
            },
            {
              "choiceLetter": "D",
              "content": "Infers type automatically"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "Which stores a single letter?",
          "expectedAnswer": "C",
          "explanation": "`char` is for one character.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "int"
            },
            {
              "choiceLetter": "B",
              "content": "bool"
            },
            {
              "choiceLetter": "C",
              "content": "char"
            },
            {
              "choiceLetter": "D",
              "content": "string"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "What\u2019s wrong with `char c = 'AB';`?",
          "expectedAnswer": "D",
          "explanation": "`char` stores one character only.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Missing semicolon"
            },
            {
              "choiceLetter": "B",
              "content": "char can't store anything"
            },
            {
              "choiceLetter": "C",
              "content": "Nothing is wrong"
            },
            {
              "choiceLetter": "D",
              "content": "Too many characters"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "What is sizeof(int) likely to print?",
          "expectedAnswer": "A",
          "explanation": "Typically 4 bytes on most systems.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "4"
            },
            {
              "choiceLetter": "B",
              "content": "8"
            },
            {
              "choiceLetter": "C",
              "content": "1"
            },
            {
              "choiceLetter": "D",
              "content": "0"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "Which line shows implicit casting?",
          "expectedAnswer": "B",
          "explanation": "double y = 5 auto-converts 5 to 5.0.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "int x = (int)4.5;"
            },
            {
              "choiceLetter": "B",
              "content": "double y = 5;"
            },
            {
              "choiceLetter": "C",
              "content": "char c = 'A';"
            },
            {
              "choiceLetter": "D",
              "content": "int z = 10;"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "Which of these is invalid?",
          "expectedAnswer": "C",
          "explanation": "bool must be true/false, not float.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "auto x = 1.2;"
            },
            {
              "choiceLetter": "B",
              "content": "int x, y;"
            },
            {
              "choiceLetter": "C",
              "content": "bool x = 5.5;"
            },
            {
              "choiceLetter": "D",
              "content": "char c = 'Z';"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "What happens with `int x = \"5\";`?",
          "expectedAnswer": "B",
          "explanation": "Incompatible types cause compiler error.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "x becomes 5"
            },
            {
              "choiceLetter": "B",
              "content": "Compile error"
            },
            {
              "choiceLetter": "C",
              "content": "x becomes 0"
            },
            {
              "choiceLetter": "D",
              "content": "Runtime crash"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "What does `const double pi = 3.14; pi = 3.0;` do?",
          "expectedAnswer": "C",
          "explanation": "Can't reassign a `const`.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Reassigns"
            },
            {
              "choiceLetter": "B",
              "content": "Ignores error"
            },
            {
              "choiceLetter": "C",
              "content": "Compile error"
            },
            {
              "choiceLetter": "D",
              "content": "Runtime warning"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "What is the result of casting `float(5) / 2`?",
          "expectedAnswer": "A",
          "explanation": "`float(5)` promotes the result to float.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "2.5"
            },
            {
              "choiceLetter": "B",
              "content": "2"
            },
            {
              "choiceLetter": "C",
              "content": "5.0"
            },
            {
              "choiceLetter": "D",
              "content": "0.0"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "How much memory does a `double` use?",
          "expectedAnswer": "B",
          "explanation": "Standard size for `double` is 8.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "4 bytes"
            },
            {
              "choiceLetter": "B",
              "content": "8 bytes"
            },
            {
              "choiceLetter": "C",
              "content": "2 bytes"
            },
            {
              "choiceLetter": "D",
              "content": "1 byte"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "Why use `sizeof()`?",
          "expectedAnswer": "D",
          "explanation": "`sizeof()` tells memory size of types.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "To compare values"
            },
            {
              "choiceLetter": "B",
              "content": "To print types"
            },
            {
              "choiceLetter": "C",
              "content": "To cast variables"
            },
            {
              "choiceLetter": "D",
              "content": "To check memory size"
            }
          ]
        }
      ],
      "codingExercises": [
        {
          "title": "Declare and Print Integer",
          "task": "Declare an integer variable, assign it the value 10, and print it.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    // Your code here\n    return 0;\n}",
          "difficulty": "EASY",
          "testCases": [
            {
              "input": "",
              "output": "10\n"
            }
          ],
          "hint": "Use the int keyword to declare a variable and cout to print it."
        },
        {
          "title": "Add Two Floating Point Numbers",
          "task": "Read two `float` values and print their sum with one decimal place.",
          "starterCode": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint main() {\n    float a, b;\n    // Your code here\n    return 0;\n}",
          "difficulty": "EASY",
          "testCases": [
            {
              "input": "3.2 4.3",
              "output": "7.5\n"
            },
            {
              "input": "1.1 2.2",
              "output": "3.3\n"
            },
            {
              "input": "0.0 0.0",
              "output": "0.0\n"
            },
            {
              "input": "-5.5 5.5",
              "output": "0.0\n"
            },
            {
              "input": "10.0 0.5",
              "output": "10.5\n"
            }
          ],
          "hint": "Use float variables and setprecision(1) with fixed to control output."
        },
        {
          "title": "Character to Integer",
          "task": "Read a single character and print its ASCII integer value.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    char ch;\n    // Your code here\n    return 0;\n}",
          "difficulty": "EASY",
          "testCases": [
            {
              "input": "a",
              "output": "97\n"
            },
            {
              "input": "A",
              "output": "65\n"
            },
            {
              "input": "Z",
              "output": "90\n"
            },
            {
              "input": "0",
              "output": "48\n"
            },
            {
              "input": " ",
              "output": "32\n"
            }
          ],
          "hint": "Read a character and convert it using static_cast<int>() or direct cout cast."
        },
        {
          "title": "Type Casting",
          "task": "Read a float and cast it to an int before printing.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    float val;\n    // Your code here\n    return 0;\n}",
          "difficulty": "MEDIUM",
          "testCases": [
            {
              "input": "7.89",
              "output": "7\n"
            },
            {
              "input": "0.5",
              "output": "0\n"
            },
            {
              "input": "99.99",
              "output": "99\n"
            },
            {
              "input": "-3.1",
              "output": "-3\n"
            },
            {
              "input": "100.0",
              "output": "100\n"
            }
          ],
          "hint": "Use static_cast<int>(value) or (int)value to perform explicit casting."
        },
        {
          "title": "Boolean Logic Check",
          "task": "Read two integers and print `true` if both are positive, otherwise print `false`.",
          "starterCode": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    int a, b;\n    // Your code here\n    return 0;\n}",
          "difficulty": "MEDIUM",
          "testCases": [
            {
              "input": "5 10",
              "output": "true\n"
            },
            {
              "input": "-1 2",
              "output": "false\n"
            },
            {
              "input": "0 0",
              "output": "false\n"
            },
            {
              "input": "1 1",
              "output": "true\n"
            },
            {
              "input": "10 -10",
              "output": "false\n"
            }
          ],
          "hint": "Use logical && and comparison operators to test positivity."
        },
        {
          "title": "Sum of Integer and Float",
          "task": "Read an int and a float, sum them as float, and print with one decimal place.",
          "starterCode": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint main() {\n    int i;\n    float f;\n    // Your code here\n    return 0;\n}",
          "difficulty": "MEDIUM",
          "testCases": [
            {
              "input": "3 3.5",
              "output": "6.5\n"
            },
            {
              "input": "0 1.0",
              "output": "1.0\n"
            },
            {
              "input": "-2 2.0",
              "output": "0.0\n"
            },
            {
              "input": "1 1.1",
              "output": "2.1\n"
            },
            {
              "input": "5 2.25",
              "output": "7.2\n"
            }
          ],
          "hint": "Ensure you're performing the sum in float and set precision properly."
        },
        {
          "title": "Size of Data Types",
          "task": "Print the size (in bytes) of `int`, `float`, `double`, and `char` each on a new line.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    // Your code here\n    return 0;\n}",
          "difficulty": "HARD",
          "testCases": [
            {
              "input": "",
              "output": "4\n4\n8\n1\n"
            }
          ],
          "hint": "Use sizeof(type) to print number of bytes for each data type."
        },
        {
          "title": "Input and Print Multiple Types",
          "task": "Read an `int`, `char`, and `float`. Print them in the same order with float showing one decimal.",
          "starterCode": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint main() {\n    int i;\n    char c;\n    float f;\n    // Your code here\n    return 0;\n}",
          "difficulty": "HARD",
          "testCases": [
            {
              "input": "10 A 5.5",
              "output": "10 A 5.5\n"
            },
            {
              "input": "1 z 1.0",
              "output": "1 z 1.0\n"
            },
            {
              "input": "0 ! 0.1",
              "output": "0 ! 0.1\n"
            },
            {
              "input": "-2 x 3.3",
              "output": "-2 x 3.3\n"
            },
            {
              "input": "100 B 0.0",
              "output": "100 B 0.0\n"
            }
          ],
          "hint": "Use cin and cout carefully and ensure float is printed with precision(1)."
        },
        {
          "title": "Scientific Notation Output",
          "task": "Read a double and print it in scientific notation with 2 digits after the decimal.",
          "starterCode": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint main() {\n    double d;\n    // Your code here\n    return 0;\n}",
          "difficulty": "HARD",
          "testCases": [
            {
              "input": "1230000",
              "output": "1.23e+06\n"
            },
            {
              "input": "0.005",
              "output": "5.00e-03\n"
            },
            {
              "input": "100000",
              "output": "1.00e+05\n"
            },
            {
              "input": "0.1",
              "output": "1.00e-01\n"
            },
            {
              "input": "999999",
              "output": "1.00e+06\n"
            }
          ],
          "hint": "Use cout with scientific and setprecision(2) to format scientific output."
        }
      ]
    },
    {
      "skillName": "Operators and Expressions",
      "skillOrder": 3,
      "difficulty": "EASY",
      "lessonBubbles": [
        {
          "bubbleOrder": 1,
          "content": "**What Are Operators?**\n\nOperators are special symbols that perform operations on variables and values. C++ supports many types of operators: arithmetic, relational, logical, assignment, and more.",
          "contentType": "TEXT",
          "difficulty": "EASY",
          "topic": "Operator Overview"
        },
        {
          "bubbleOrder": 2,
          "content": "**Arithmetic Operators**\n\nThese perform basic math operations:\n\n- `+` Addition\n- `-` Subtraction\n- `*` Multiplication\n- `/` Division\n- `%` Modulus (remainder)\n\n```cpp\nint a = 5 + 3; // 8\nint b = 10 % 3; // 1\n```",
          "contentType": "TEXT",
          "difficulty": "EASY",
          "topic": "Arithmetic"
        },
        {
          "bubbleOrder": 3,
          "content": "**Assignment Operators**\n\nAssignment operators assign values to variables:\n\n- `=` Simple assignment\n- `+=`, `-=`, `*=`, `/=`, `%=` Compound assignments\n\n```cpp\nint a = 5;\na += 3; // now a is 8\n```",
          "contentType": "TEXT",
          "difficulty": "EASY",
          "topic": "Assignment"
        },
        {
          "bubbleOrder": 4,
          "content": "**Relational Operators**\n\nUsed for comparisons:\n- `==` Equal to\n- `!=` Not equal to\n- `<`, `>`, `<=`, `>=`\n\nThey return `true` or `false`.\n\n```cpp\nint x = 5;\nbool result = (x != 4); // true\n```",
          "contentType": "TEXT",
          "difficulty": "MEDIUM",
          "topic": "Relational"
        },
        {
          "bubbleOrder": 5,
          "content": "**Logical Operators**\n\nCombine boolean expressions:\n- `&&` Logical AND\n- `||` Logical OR\n- `!` Logical NOT\n\n```cpp\nbool a = true;\nbool b = false;\nbool result = a && !b; // true\n```",
          "contentType": "TEXT",
          "difficulty": "MEDIUM",
          "topic": "Logical"
        },
        {
          "bubbleOrder": 6,
          "content": "**Operator Precedence**\n\nSome operators run before others. Multiplication/division happens before addition/subtraction.\n\n```cpp\nint result = 2 + 3 * 4; // 14, not 20\n```\nUse parentheses to control order:\n```cpp\nint result = (2 + 3) * 4; // 20\n```",
          "contentType": "TEXT",
          "difficulty": "MEDIUM",
          "topic": "Precedence"
        },
        {
          "bubbleOrder": 7,
          "content": "**Increment and Decrement**\n\n`++` increases a variable by 1, `--` decreases it:\n```cpp\nint x = 5;\nx++; // 6\n--x;  // 5\n```\nPrefix (`++x`) vs postfix (`x++`) matters in expressions.",
          "contentType": "TEXT",
          "difficulty": "HARD",
          "topic": "Increment/Decrement"
        },
        {
          "bubbleOrder": 8,
          "content": "**Compound Expressions**\n\nOperators can be combined in complex expressions. Always consider precedence and grouping:\n```cpp\nint result = a + b * (c - d) / e;\n```",
          "contentType": "TEXT",
          "difficulty": "HARD",
          "topic": "Combined Expressions"
        },
        {
          "bubbleOrder": 9,
          "content": "**Bitwise Operators (Intro)**\n\nBitwise operators operate at the bit level:\n- `&` AND\n- `|` OR\n- `^` XOR\n- `~` NOT\n\n```cpp\nint x = 5 & 3; // 1\n```",
          "contentType": "TEXT",
          "difficulty": "HARD",
          "topic": "Bitwise"
        },
        {
          "bubbleOrder": 10,
          "content": "**Common Mistakes**\n\n- Using `=` instead of `==` in conditions\n- Forgetting parentheses in complex expressions\n- Misusing operator precedence",
          "contentType": "TEXT",
          "difficulty": "HARD",
          "topic": "Common Errors"
        }
      ],
      "quizQuestions": [
        {
          "difficulty": "EASY",
          "question": "Which operator is used for addition?",
          "expectedAnswer": "A",
          "explanation": "The `+` operator performs addition.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "+"
            },
            {
              "choiceLetter": "B",
              "content": "-"
            },
            {
              "choiceLetter": "C",
              "content": "*"
            },
            {
              "choiceLetter": "D",
              "content": "%"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "What does `*` do in C++?",
          "expectedAnswer": "C",
          "explanation": "`*` multiplies values.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Subtraction"
            },
            {
              "choiceLetter": "B",
              "content": "Division"
            },
            {
              "choiceLetter": "C",
              "content": "Multiplication"
            },
            {
              "choiceLetter": "D",
              "content": "Modulus"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "Which of the following is a comparison operator?",
          "expectedAnswer": "B",
          "explanation": "`==` checks for equality.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "+"
            },
            {
              "choiceLetter": "B",
              "content": "=="
            },
            {
              "choiceLetter": "C",
              "content": "&"
            },
            {
              "choiceLetter": "D",
              "content": "!"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "Which symbol is used for assigning a value?",
          "expectedAnswer": "A",
          "explanation": "`=` assigns a value.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "="
            },
            {
              "choiceLetter": "B",
              "content": "=="
            },
            {
              "choiceLetter": "C",
              "content": "<-"
            },
            {
              "choiceLetter": "D",
              "content": ":="
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "What is the output of `int x = 5; x++;`?",
          "expectedAnswer": "D",
          "explanation": "`x++` increases x by 1.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "4"
            },
            {
              "choiceLetter": "B",
              "content": "5"
            },
            {
              "choiceLetter": "C",
              "content": "Error"
            },
            {
              "choiceLetter": "D",
              "content": "6"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "What does `5 % 2` evaluate to?",
          "expectedAnswer": "A",
          "explanation": "`%` gives remainder, which is 1.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "1"
            },
            {
              "choiceLetter": "B",
              "content": "2.5"
            },
            {
              "choiceLetter": "C",
              "content": "2"
            },
            {
              "choiceLetter": "D",
              "content": "0"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "What is the value of `3 + 4 * 2`?",
          "expectedAnswer": "D",
          "explanation": "Multiplication happens first: 4 * 2 = 8, then 3 + 8 = 11.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "14"
            },
            {
              "choiceLetter": "B",
              "content": "11"
            },
            {
              "choiceLetter": "C",
              "content": "7"
            },
            {
              "choiceLetter": "D",
              "content": "11"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "Which operator is used for logical AND?",
          "expectedAnswer": "B",
          "explanation": "`&&` checks if both expressions are true.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "&"
            },
            {
              "choiceLetter": "B",
              "content": "&&"
            },
            {
              "choiceLetter": "C",
              "content": "|"
            },
            {
              "choiceLetter": "D",
              "content": "!"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "What is the result of `!(true || false)`?",
          "expectedAnswer": "B",
          "explanation": "`true || false` is `true`, and `!true` is `false`.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "true"
            },
            {
              "choiceLetter": "B",
              "content": "false"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "Which of these expressions is valid?",
          "expectedAnswer": "A",
          "explanation": "Option A follows proper syntax and precedence.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "int x = 4 + 5 * 2;"
            },
            {
              "choiceLetter": "B",
              "content": "int x = 4 + * 2;"
            },
            {
              "choiceLetter": "C",
              "content": "x == 10 = int;"
            },
            {
              "choiceLetter": "D",
              "content": "int = 5 x;"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "What is the output of `int a = 4; int b = a++; cout << b;`?",
          "expectedAnswer": "C",
          "explanation": "Post-increment returns old value.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "3"
            },
            {
              "choiceLetter": "B",
              "content": "5"
            },
            {
              "choiceLetter": "C",
              "content": "4"
            },
            {
              "choiceLetter": "D",
              "content": "Undefined"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "Which operator has the highest precedence?",
          "expectedAnswer": "A",
          "explanation": "Multiplication happens before addition or comparison.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "*"
            },
            {
              "choiceLetter": "B",
              "content": "+"
            },
            {
              "choiceLetter": "C",
              "content": "=="
            },
            {
              "choiceLetter": "D",
              "content": "&&"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "What does `x ^= y;` mean?",
          "expectedAnswer": "D",
          "explanation": "`^=` applies XOR then assigns.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Logical OR"
            },
            {
              "choiceLetter": "B",
              "content": "Set x to y"
            },
            {
              "choiceLetter": "C",
              "content": "Bitwise AND"
            },
            {
              "choiceLetter": "D",
              "content": "Bitwise XOR and assign"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "What is wrong with `if (x = 5)`?",
          "expectedAnswer": "B",
          "explanation": "`=` assigns, `==` compares.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Nothing"
            },
            {
              "choiceLetter": "B",
              "content": "Uses assignment instead of comparison"
            },
            {
              "choiceLetter": "C",
              "content": "Wrong syntax"
            },
            {
              "choiceLetter": "D",
              "content": "Missing return"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "What is the result of `2 + 3 * 4 / 2`?",
          "expectedAnswer": "C",
          "explanation": "3*4=12, /2=6, +2=8.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "10"
            },
            {
              "choiceLetter": "B",
              "content": "20"
            },
            {
              "choiceLetter": "C",
              "content": "8"
            },
            {
              "choiceLetter": "D",
              "content": "3"
            }
          ]
        }
      ],
      "codingExercises": [
        {
          "title": "Sum of Two Numbers",
          "task": "Read two integers and print their sum using the `+` operator.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int a, b;\n    cin >> a >> b;\n    // Your code here\n    return 0;\n}",
          "difficulty": "EASY",
          "testCases": [
            {
              "input": "3 4",
              "output": "7\n"
            },
            {
              "input": "10 5",
              "output": "15\n"
            },
            {
              "input": "-1 1",
              "output": "0\n"
            },
            {
              "input": "0 0",
              "output": "0\n"
            },
            {
              "input": "100 200",
              "output": "300\n"
            }
          ],
          "hint": "Use the `+` operator to add the two input integers."
        },
        {
          "title": "Difference Between Two Numbers",
          "task": "Read two integers and print their absolute difference using the `-` operator and `abs()`.",
          "starterCode": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint main() {\n    int a, b;\n    cin >> a >> b;\n    // Your code here\n    return 0;\n}",
          "difficulty": "EASY",
          "testCases": [
            {
              "input": "5 3",
              "output": "2\n"
            },
            {
              "input": "3 5",
              "output": "2\n"
            },
            {
              "input": "0 0",
              "output": "0\n"
            },
            {
              "input": "100 90",
              "output": "10\n"
            },
            {
              "input": "-1 1",
              "output": "2\n"
            }
          ],
          "hint": "Use the `abs()` function to calculate the absolute value of the difference."
        },
        {
          "title": "Product of Three Numbers",
          "task": "Read three integers and print their product using the `*` operator.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int a, b, c;\n    cin >> a >> b >> c;\n    // Your code here\n    return 0;\n}",
          "difficulty": "EASY",
          "testCases": [
            {
              "input": "1 2 3",
              "output": "6\n"
            },
            {
              "input": "2 3 4",
              "output": "24\n"
            },
            {
              "input": "-1 2 3",
              "output": "-6\n"
            },
            {
              "input": "0 5 10",
              "output": "0\n"
            },
            {
              "input": "1 1 1",
              "output": "1\n"
            }
          ],
          "hint": "Multiply the three integers using the `*` operator."
        },
        {
          "title": "Average of Three Numbers",
          "task": "Read three integers and print their average as a floating-point number.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int a, b, c;\n    cin >> a >> b >> c;\n    // Your code here\n    return 0;\n}",
          "difficulty": "MEDIUM",
          "testCases": [
            {
              "input": "3 3 0",
              "output": "2\n"
            },
            {
              "input": "1 2 3",
              "output": "2\n"
            },
            {
              "input": "10 10 10",
              "output": "10\n"
            },
            {
              "input": "-3 0 3",
              "output": "0\n"
            },
            {
              "input": "6 9 3",
              "output": "6\n"
            }
          ],
          "hint": "Add the numbers and divide by 3; cast to float if needed for precision."
        },
        {
          "title": "Modulus Operator",
          "task": "Read two integers and print the remainder of their division using the `%` operator.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int a, b;\n    cin >> a >> b;\n    // Your code here\n    return 0;\n}",
          "difficulty": "MEDIUM",
          "testCases": [
            {
              "input": "10 3",
              "output": "1\n"
            },
            {
              "input": "5 2",
              "output": "1\n"
            },
            {
              "input": "4 2",
              "output": "0\n"
            },
            {
              "input": "9 5",
              "output": "4\n"
            },
            {
              "input": "7 4",
              "output": "3\n"
            }
          ],
          "hint": "Use the `%` operator to get the remainder after dividing two numbers."
        },
        {
          "title": "Check if Number is Even",
          "task": "Read an integer and use modulus to print `Even` or `Odd`.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    // Your code here\n    return 0;\n}",
          "difficulty": "MEDIUM",
          "testCases": [
            {
              "input": "4",
              "output": "Even\n"
            },
            {
              "input": "7",
              "output": "Odd\n"
            },
            {
              "input": "0",
              "output": "Even\n"
            },
            {
              "input": "1",
              "output": "Odd\n"
            },
            {
              "input": "100",
              "output": "Even\n"
            }
          ],
          "hint": "Check if the number is divisible by 2 using `% 2 == 0`."
        },
        {
          "title": "Compound Assignment Usage",
          "task": "Read an integer and apply `+=`, `-=`, `*=`, and `/=` to transform and print the value at each step.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int x;\n    cin >> x;\n    // Your code here\n    return 0;\n}",
          "difficulty": "HARD",
          "testCases": [
            {
              "input": "3",
              "output": "6\n5\n10\n2\n"
            },
            {
              "input": "4",
              "output": "7\n6\n12\n3\n"
            },
            {
              "input": "2",
              "output": "5\n4\n8\n2\n"
            },
            {
              "input": "1",
              "output": "4\n3\n6\n1\n"
            },
            {
              "input": "10",
              "output": "13\n12\n24\n6\n"
            }
          ],
          "hint": "Apply `+=`, `-=`, `*=`, and `/=` one after another to modify the variable."
        },
        {
          "title": "Compare Three Numbers",
          "task": "Read three integers and print the largest using conditional operators.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int a, b, c;\n    cin >> a >> b >> c;\n    // Your code here\n    return 0;\n}",
          "difficulty": "HARD",
          "testCases": [
            {
              "input": "3 4 5",
              "output": "5\n"
            },
            {
              "input": "9 1 2",
              "output": "9\n"
            },
            {
              "input": "0 0 0",
              "output": "0\n"
            },
            {
              "input": "-1 -2 -3",
              "output": "-1\n"
            },
            {
              "input": "100 200 150",
              "output": "200\n"
            }
          ],
          "hint": "Use nested if-else or the ternary operator to determine the largest number."
        },
        {
          "title": "Evaluate Complex Expression",
          "task": "Read 3 integers a, b, c and evaluate `(a + b) * c / 2`. Print result as integer.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int a, b, c;\n    cin >> a >> b >> c;\n    // Your code here\n    return 0;\n}",
          "difficulty": "HARD",
          "testCases": [
            {
              "input": "2 2 10",
              "output": "20\n"
            },
            {
              "input": "3 3 4",
              "output": "12\n"
            },
            {
              "input": "1 1 6",
              "output": "6\n"
            },
            {
              "input": "5 5 2",
              "output": "10\n"
            },
            {
              "input": "10 10 1",
              "output": "10\n"
            }
          ],
          "hint": "Follow order of operations and use parentheses to ensure correct precedence."
        }
      ]
    },
    {
      "skillName": "Input and Output",
      "skillOrder": 4,
      "difficulty": "EASY",
      "lessonBubbles": [
        {
          "bubbleOrder": 1,
          "content": "**Introduction to Input and Output**\n\nC++ uses streams for both input and output. You\u2019ll most commonly use:\n- `cout` (Console Output)\n- `cin` (Console Input)\nThese come from the `iostream` library.",
          "contentType": "TEXT",
          "difficulty": "EASY",
          "topic": "IO Basics"
        },
        {
          "bubbleOrder": 2,
          "content": "**Using `cout` for Output**\n\n`cout` displays data to the console:\n```cpp\ncout << \"Hello, world!\";\n```\nUse `<<` to chain multiple outputs:\n```cpp\ncout << \"Score: \" << score;\n```",
          "contentType": "TEXT",
          "difficulty": "EASY",
          "topic": "cout Basics"
        },
        {
          "bubbleOrder": 3,
          "content": "**Using `cin` for Input**\n\n`cin` reads input from the user:\n```cpp\nint age;\ncin >> age;\n```\nAlways declare a variable before trying to use `cin` with it.",
          "contentType": "TEXT",
          "difficulty": "EASY",
          "topic": "cin Basics"
        },
        {
          "bubbleOrder": 4,
          "content": "**Taking Multiple Inputs**\n\nYou can chain `cin` just like `cout`:\n```cpp\nint x, y;\ncin >> x >> y;\n```\nSeparate the inputs with a space or newline in the console.",
          "contentType": "TEXT",
          "difficulty": "EASY",
          "topic": "Multiple Inputs"
        },
        {
          "bubbleOrder": 5,
          "content": "**Using `getline()` for Full Line Input**\n\nTo read an entire line of text (including spaces), use:\n```cpp\nstring name;\ngetline(cin, name);\n```\nUse `getline()` after `cin` carefully \u2014 it may need `cin.ignore()` to consume leftover newline characters.",
          "contentType": "TEXT",
          "difficulty": "MEDIUM",
          "topic": "getline"
        },
        {
          "bubbleOrder": 6,
          "content": "**Formatting Output**\n\nUse `endl` or `\\n` for line breaks:\n```cpp\ncout << \"Line 1\" << endl;\n```\nSet precision for floating-point numbers using `iomanip`:\n```cpp\n#include <iomanip>\ncout << fixed << setprecision(2) << 3.14159;\n```",
          "contentType": "TEXT",
          "difficulty": "MEDIUM",
          "topic": "Formatting"
        },
        {
          "bubbleOrder": 7,
          "content": "**Mixing `cin` and `getline()` Safely**\n\nSometimes `cin` leaves behind a newline, which causes `getline()` to read an empty string. Use:\n```cpp\ncin.ignore();\ngetline(cin, input);\n```\nThis skips the leftover newline character.",
          "contentType": "TEXT",
          "difficulty": "MEDIUM",
          "topic": "cin.ignore"
        },
        {
          "bubbleOrder": 8,
          "content": "**Input Validation**\n\nAlways check if input was successful:\n```cpp\nint num;\nif (cin >> num) {\n  // valid\n} else {\n  // invalid\n}\n```\nHandle bad input gracefully to avoid bugs or crashes.",
          "contentType": "TEXT",
          "difficulty": "HARD",
          "topic": "Validation"
        },
        {
          "bubbleOrder": 9,
          "content": "**Reading Multiple Lines**\n\nLoop with `getline()` to read several lines:\n```cpp\nfor (int i = 0; i < 3; i++) {\n  string line;\n  getline(cin, line);\n  cout << line << endl;\n}\n```",
          "contentType": "TEXT",
          "difficulty": "HARD",
          "topic": "Loop Input"
        },
        {
          "bubbleOrder": 10,
          "content": "**Common Input/Output Errors**\n\n- Forgetting `#include <iostream>`\n- Not declaring a variable before using `cin`\n- Forgetting to flush `cin` before using `getline`\n- Using wrong formatting specifiers (C-style in C++)",
          "contentType": "TEXT",
          "difficulty": "HARD",
          "topic": "Common Mistakes"
        }
      ],
      "quizQuestions": [
        {
          "difficulty": "EASY",
          "question": "What does `cout` do in C++?",
          "expectedAnswer": "A",
          "explanation": "`cout` is used to display output to the console.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Displays output"
            },
            {
              "choiceLetter": "B",
              "content": "Takes input"
            },
            {
              "choiceLetter": "C",
              "content": "Performs math"
            },
            {
              "choiceLetter": "D",
              "content": "Allocates memory"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "Which symbol is used with `cout`?",
          "expectedAnswer": "C",
          "explanation": "`<<` is the insertion operator used with `cout`.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": ">>"
            },
            {
              "choiceLetter": "B",
              "content": "::"
            },
            {
              "choiceLetter": "C",
              "content": "<<"
            },
            {
              "choiceLetter": "D",
              "content": "=="
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "Which keyword is used to receive input from the user?",
          "expectedAnswer": "B",
          "explanation": "`cin` is used to read input.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "cout"
            },
            {
              "choiceLetter": "B",
              "content": "cin"
            },
            {
              "choiceLetter": "C",
              "content": "read"
            },
            {
              "choiceLetter": "D",
              "content": "get"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "How do you end a line using `cout`?",
          "expectedAnswer": "D",
          "explanation": "`endl` inserts a newline.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "\\t"
            },
            {
              "choiceLetter": "B",
              "content": ";"
            },
            {
              "choiceLetter": "C",
              "content": "#"
            },
            {
              "choiceLetter": "D",
              "content": "endl"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "Which header must be included for `cin` and `cout`?",
          "expectedAnswer": "A",
          "explanation": "`iostream` provides standard input/output streams.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "#include <iostream>"
            },
            {
              "choiceLetter": "B",
              "content": "#include <string>"
            },
            {
              "choiceLetter": "C",
              "content": "#include <input>"
            },
            {
              "choiceLetter": "D",
              "content": "#include <stdio.h>"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "What is the purpose of `getline()`?",
          "expectedAnswer": "C",
          "explanation": "`getline()` reads an entire line of text.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Get an integer"
            },
            {
              "choiceLetter": "B",
              "content": "Clear memory"
            },
            {
              "choiceLetter": "C",
              "content": "Read a full line"
            },
            {
              "choiceLetter": "D",
              "content": "Flush the buffer"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "Why might `getline()` return an empty string after `cin`?",
          "expectedAnswer": "A",
          "explanation": "A newline character from `cin` may be left behind and consumed by `getline()`.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Leftover newline"
            },
            {
              "choiceLetter": "B",
              "content": "Wrong datatype"
            },
            {
              "choiceLetter": "C",
              "content": "Memory error"
            },
            {
              "choiceLetter": "D",
              "content": "Missing header"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "How do you read an entire line into a string variable?",
          "expectedAnswer": "B",
          "explanation": "`getline()` reads the whole line into a string.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "cin >> string"
            },
            {
              "choiceLetter": "B",
              "content": "getline(cin, str)"
            },
            {
              "choiceLetter": "C",
              "content": "cin.get()"
            },
            {
              "choiceLetter": "D",
              "content": "input(str)"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "What does `cin.ignore()` do?",
          "expectedAnswer": "D",
          "explanation": "It skips leftover characters in the input buffer.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Skips whitespace"
            },
            {
              "choiceLetter": "B",
              "content": "Ends input"
            },
            {
              "choiceLetter": "C",
              "content": "Clears cout"
            },
            {
              "choiceLetter": "D",
              "content": "Skips the next character in input"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "Which library is used with `setprecision()`?",
          "expectedAnswer": "C",
          "explanation": "`iomanip` is used for output formatting.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "iostream"
            },
            {
              "choiceLetter": "B",
              "content": "string"
            },
            {
              "choiceLetter": "C",
              "content": "iomanip"
            },
            {
              "choiceLetter": "D",
              "content": "stdio"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "What happens if input type doesn't match declared variable?",
          "expectedAnswer": "A",
          "explanation": "Type mismatch causes `cin` to fail.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "cin fails"
            },
            {
              "choiceLetter": "B",
              "content": "Program crashes"
            },
            {
              "choiceLetter": "C",
              "content": "Compiler error"
            },
            {
              "choiceLetter": "D",
              "content": "Nothing"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "Which code reads 3 lines from the user?",
          "expectedAnswer": "C",
          "explanation": "`getline()` inside a loop is correct.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "for (int i=0; i<3) cin >> line;"
            },
            {
              "choiceLetter": "B",
              "content": "getline(line, cin);"
            },
            {
              "choiceLetter": "C",
              "content": "for (int i=0; i<3; i++) getline(cin, line);"
            },
            {
              "choiceLetter": "D",
              "content": "cin.getlines(3);"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "Why is `cin >>` not good for full sentences?",
          "expectedAnswer": "B",
          "explanation": "`cin >>` stops reading at spaces.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "It skips spaces"
            },
            {
              "choiceLetter": "B",
              "content": "It stops at whitespace"
            },
            {
              "choiceLetter": "C",
              "content": "It's for numbers"
            },
            {
              "choiceLetter": "D",
              "content": "It\u2019s outdated"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "What does this output?\n```cpp\nint x;\ncin >> x;\ncout << x;\n```",
          "expectedAnswer": "D",
          "explanation": "It outputs whatever the user entered.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Error"
            },
            {
              "choiceLetter": "B",
              "content": "0"
            },
            {
              "choiceLetter": "C",
              "content": "cin"
            },
            {
              "choiceLetter": "D",
              "content": "User input"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "Why is `cin >> name; getline(cin, line);` problematic?",
          "expectedAnswer": "A",
          "explanation": "`cin` leaves `\\n` that `getline` reads as empty.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Leftover newline"
            },
            {
              "choiceLetter": "B",
              "content": "Extra memory"
            },
            {
              "choiceLetter": "C",
              "content": "Invalid syntax"
            },
            {
              "choiceLetter": "D",
              "content": "Wrong return"
            }
          ]
        }
      ],
      "codingExercises": [
        {
          "title": "Basic Integer Input/Output",
          "task": "Read an integer using `cin` and print it using `cout`.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int x;\n    // Your code here\n    return 0;\n}",
          "difficulty": "EASY",
          "testCases": [
            {
              "input": "10",
              "output": "10\n"
            },
            {
              "input": "0",
              "output": "0\n"
            },
            {
              "input": "-1",
              "output": "-1\n"
            },
            {
              "input": "100",
              "output": "100\n"
            },
            {
              "input": "999",
              "output": "999\n"
            }
          ],
          "hint": "Use `cin` to read the input and `cout` to print it."
        },
        {
          "title": "Print Two Values with Space",
          "task": "Read two integers and print them separated by a space.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int a, b;\n    // Your code here\n    return 0;\n}",
          "difficulty": "EASY",
          "testCases": [
            {
              "input": "3 4",
              "output": "3 4\n"
            },
            {
              "input": "0 0",
              "output": "0 0\n"
            },
            {
              "input": "10 20",
              "output": "10 20\n"
            },
            {
              "input": "-1 1",
              "output": "-1 1\n"
            },
            {
              "input": "5 100",
              "output": "5 100\n"
            }
          ],
          "hint": "Use `cin` to read both numbers and print them with a space."
        },
        {
          "title": "Newline with endl",
          "task": "Read a word and print it followed by a newline using `endl`.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    string word;\n    // Your code here\n    return 0;\n}",
          "difficulty": "EASY",
          "testCases": [
            {
              "input": "Hello",
              "output": "Hello\n"
            },
            {
              "input": "World",
              "output": "World\n"
            },
            {
              "input": "Test",
              "output": "Test\n"
            },
            {
              "input": "GPT",
              "output": "GPT\n"
            },
            {
              "input": "Cplusplus",
              "output": "Cplusplus\n"
            }
          ],
          "hint": "Use `cout << word << endl;` to print followed by a newline."
        },
        {
          "title": "Read and Print Full Sentence",
          "task": "Use `getline(cin, ...)` to read a full line with spaces and print it.",
          "starterCode": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string line;\n    // Your code here\n    return 0;\n}",
          "difficulty": "MEDIUM",
          "testCases": [
            {
              "input": "This is a sentence",
              "output": "This is a sentence\n"
            },
            {
              "input": "Hello World",
              "output": "Hello World\n"
            },
            {
              "input": "C++ is fun",
              "output": "C++ is fun\n"
            },
            {
              "input": "Test input line",
              "output": "Test input line\n"
            },
            {
              "input": "OpenAI GPT-4",
              "output": "OpenAI GPT-4\n"
            }
          ],
          "hint": "Use `getline(cin, line)` to read a sentence including spaces."
        },
        {
          "title": "Multiple Data Types",
          "task": "Read an integer and a string, then print them on separate lines.",
          "starterCode": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    int age;\n    string name;\n    // Your code here\n    return 0;\n}",
          "difficulty": "MEDIUM",
          "testCases": [
            {
              "input": "21\nAlice",
              "output": "21\nAlice\n"
            },
            {
              "input": "30\nBob",
              "output": "30\nBob\n"
            },
            {
              "input": "18\nJohn",
              "output": "18\nJohn\n"
            },
            {
              "input": "25\nZoe",
              "output": "25\nZoe\n"
            },
            {
              "input": "40\nLeo",
              "output": "40\nLeo\n"
            }
          ],
          "hint": "Read int with `cin`, then use `cin.ignore()` before `getline()`."
        },
        {
          "title": "Echo Multiple Words",
          "task": "Read three space-separated words and echo them each on a new line.",
          "starterCode": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string a, b, c;\n    // Your code here\n    return 0;\n}",
          "difficulty": "MEDIUM",
          "testCases": [
            {
              "input": "one two three",
              "output": "one\ntwo\nthree\n"
            },
            {
              "input": "red blue green",
              "output": "red\nblue\ngreen\n"
            },
            {
              "input": "cat dog fish",
              "output": "cat\ndog\nfish\n"
            },
            {
              "input": "apple banana orange",
              "output": "apple\nbanana\norange\n"
            },
            {
              "input": "A B C",
              "output": "A\nB\nC\n"
            }
          ],
          "hint": "Use three variables and `cin` to read and print them separately."
        },
        {
          "title": "Read Matrix and Print Transpose",
          "task": "Read a 2x2 matrix using `cin` and print its transpose using `cout`.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int a[2][2];\n    // Your code here\n    return 0;\n}",
          "difficulty": "HARD",
          "testCases": [
            {
              "input": "1 2\n3 4",
              "output": "1 3\n2 4\n"
            },
            {
              "input": "5 6\n7 8",
              "output": "5 7\n6 8\n"
            },
            {
              "input": "9 10\n11 12",
              "output": "9 11\n10 12\n"
            },
            {
              "input": "0 1\n1 0",
              "output": "0 1\n1 0\n"
            },
            {
              "input": "-1 -2\n-3 -4",
              "output": "-1 -3\n-2 -4\n"
            }
          ],
          "hint": "Use nested loops or direct index access to print the transpose."
        },
        {
          "title": "Format Output with Tabs and Newlines",
          "task": "Read three integers and print them using tabs and newlines between them.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int a, b, c;\n    // Your code here\n    return 0;\n}",
          "difficulty": "HARD",
          "testCases": [
            {
              "input": "1 2 3",
              "output": "1\t2\n3\n"
            },
            {
              "input": "10 20 30",
              "output": "10\t20\n30\n"
            },
            {
              "input": "5 6 7",
              "output": "5\t6\n7\n"
            },
            {
              "input": "100 200 300",
              "output": "100\t200\n300\n"
            },
            {
              "input": "0 0 0",
              "output": "0\t0\n0\n"
            }
          ],
          "hint": "Use `\\t` for tabs and `\\n` to start a new line."
        },
        {
          "title": "Use cin.ignore Before getline",
          "task": "Read an integer then a full line. Use `cin.ignore()` to skip the newline.",
          "starterCode": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    int x;\n    string line;\n    // Your code here\n    return 0;\n}",
          "difficulty": "HARD",
          "testCases": [
            {
              "input": "123\nWelcome to C++",
              "output": "123\nWelcome to C++\n"
            },
            {
              "input": "42\nHello World",
              "output": "42\nHello World\n"
            },
            {
              "input": "0\nLine with spaces",
              "output": "0\nLine with spaces\n"
            },
            {
              "input": "7\nSeven here",
              "output": "7\nSeven here\n"
            },
            {
              "input": "88\nEnd of test",
              "output": "88\nEnd of test\n"
            }
          ],
          "hint": "Use `cin.ignore()` before `getline()` after reading with `cin`."
        }
      ]
    },
    {
      "skillName": "Control Flow (if, else, switch)",
      "skillOrder": 5,
      "difficulty": "MEDIUM",
      "lessonBubbles": [
        {
          "bubbleOrder": 1,
          "content": "**Introduction to Control Flow**\n\nControl flow lets your program make decisions. The two primary tools are:\n- `if`, `else if`, `else`\n- `switch` statements",
          "contentType": "TEXT",
          "difficulty": "EASY",
          "topic": "Overview"
        },
        {
          "bubbleOrder": 2,
          "content": "**Using `if` Statements**\n\n```cpp\nint score = 90;\nif (score >= 90) {\n  cout << \"Excellent!\";\n}\n```\nThe condition in parentheses must evaluate to `true` or `false`.",
          "contentType": "TEXT",
          "difficulty": "EASY",
          "topic": "If Statements"
        },
        {
          "bubbleOrder": 3,
          "content": "**Using `else` and `else if`**\n\n```cpp\nif (score >= 90) {\n  cout << \"A\";\n} else if (score >= 80) {\n  cout << \"B\";\n} else {\n  cout << \"C or lower\";\n}\n```",
          "contentType": "TEXT",
          "difficulty": "EASY",
          "topic": "Else Conditions"
        },
        {
          "bubbleOrder": 4,
          "content": "**Relational and Logical Operators**\n\n- `==`, `!=`, `<`, `>`, `<=`, `>=`\n- `&&`, `||`, `!`\n```cpp\nif (x > 0 && x < 10) {\n  cout << \"In range\";\n}\n```",
          "contentType": "TEXT",
          "difficulty": "MEDIUM",
          "topic": "Operators"
        },
        {
          "bubbleOrder": 5,
          "content": "**Nested Conditions**\n\nYou can place `if` statements inside each other:\n```cpp\nif (x > 0) {\n  if (x < 10) {\n    cout << \"Single digit\";\n  }\n}\n```",
          "contentType": "TEXT",
          "difficulty": "MEDIUM",
          "topic": "Nested Ifs"
        },
        {
          "bubbleOrder": 6,
          "content": "**Switch Statements**\n\nBest for comparing a single variable to multiple values:\n```cpp\nint grade = 2;\nswitch (grade) {\n  case 1: cout << \"Good\"; break;\n  case 2: cout << \"Great\"; break;\n  default: cout << \"Unknown\";\n}\n```",
          "contentType": "TEXT",
          "difficulty": "MEDIUM",
          "topic": "Switch"
        },
        {
          "bubbleOrder": 7,
          "content": "**Why Use `switch`?**\n\nUse it when:\n- You\u2019re comparing one variable\n- All comparisons are against constant values\n- There are many `if`...`else if` cases\n\nIt\u2019s often more readable than long `if` chains.",
          "contentType": "TEXT",
          "difficulty": "MEDIUM",
          "topic": "Switch Advantages"
        },
        {
          "bubbleOrder": 8,
          "content": "**Common Pitfalls**\n\n- Missing `break` causes fall-through\n- Using conditions or non-constant expressions in `case`\n- Forgetting `default` case\n\n```cpp\nswitch (x) {\n  case 1:\n  case 2: cout << \"1 or 2\"; break;\n  default: cout << \"Other\";\n}\n```",
          "contentType": "TEXT",
          "difficulty": "HARD",
          "topic": "Common Mistakes"
        },
        {
          "bubbleOrder": 9,
          "content": "**Ternary Operator**\n\nShortcut for simple `if-else`:\n```cpp\nint max = (a > b) ? a : b;\n```\nIt returns one of two values based on a condition.",
          "contentType": "TEXT",
          "difficulty": "HARD",
          "topic": "Ternary"
        },
        {
          "bubbleOrder": 10,
          "content": "**Boolean Expressions in Conditions**\n\nAny non-zero value is considered `true`. Zero is `false`.\n```cpp\nif (5) cout << \"This will print.\";\n```\nBut for clarity, always use proper boolean expressions.",
          "contentType": "TEXT",
          "difficulty": "HARD",
          "topic": "Truthy/Falsy"
        }
      ],
      "quizQuestions": [
        {
          "difficulty": "EASY",
          "question": "Which keyword starts a conditional check?",
          "expectedAnswer": "A",
          "explanation": "`if` starts a condition check.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "if"
            },
            {
              "choiceLetter": "B",
              "content": "loop"
            },
            {
              "choiceLetter": "C",
              "content": "when"
            },
            {
              "choiceLetter": "D",
              "content": "switch"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "What is the output of this code?\n```cpp\nif (1) cout << \"Hi\";\n```",
          "expectedAnswer": "B",
          "explanation": "`1` is treated as `true`, so \"Hi\" is printed.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Nothing"
            },
            {
              "choiceLetter": "B",
              "content": "Hi"
            },
            {
              "choiceLetter": "C",
              "content": "1"
            },
            {
              "choiceLetter": "D",
              "content": "Error"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "Which operator means 'equal to'?",
          "expectedAnswer": "D",
          "explanation": "`==` compares two values.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "="
            },
            {
              "choiceLetter": "B",
              "content": "+"
            },
            {
              "choiceLetter": "C",
              "content": "!"
            },
            {
              "choiceLetter": "D",
              "content": "=="
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "Which part runs when no `if` or `else if` is true?",
          "expectedAnswer": "C",
          "explanation": "The `else` block runs if no condition is true.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "main"
            },
            {
              "choiceLetter": "B",
              "content": "switch"
            },
            {
              "choiceLetter": "C",
              "content": "else"
            },
            {
              "choiceLetter": "D",
              "content": "then"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "What happens without `break` in a `switch`?",
          "expectedAnswer": "A",
          "explanation": "Without `break`, execution continues to next case.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Fall-through"
            },
            {
              "choiceLetter": "B",
              "content": "Error"
            },
            {
              "choiceLetter": "C",
              "content": "Return"
            },
            {
              "choiceLetter": "D",
              "content": "Skip case"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "What does `if (x > 0 && x < 10)` check?",
          "expectedAnswer": "B",
          "explanation": "It checks if x is between 1 and 9.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "x equals 0 or 10"
            },
            {
              "choiceLetter": "B",
              "content": "x is between 1 and 9"
            },
            {
              "choiceLetter": "C",
              "content": "x is negative"
            },
            {
              "choiceLetter": "D",
              "content": "x is 10"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "Which value is considered false?",
          "expectedAnswer": "C",
          "explanation": "Only 0 is treated as false.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "1"
            },
            {
              "choiceLetter": "B",
              "content": "-1"
            },
            {
              "choiceLetter": "C",
              "content": "0"
            },
            {
              "choiceLetter": "D",
              "content": "2"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "Choose the correct ternary syntax.",
          "expectedAnswer": "A",
          "explanation": "Correct ternary usage is `condition ? true : false`.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "a > b ? a : b"
            },
            {
              "choiceLetter": "B",
              "content": "if ? a > b : b"
            },
            {
              "choiceLetter": "C",
              "content": "?: a > b"
            },
            {
              "choiceLetter": "D",
              "content": "if (a > b) ? a else b"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "Which is not valid inside a `switch` case?",
          "expectedAnswer": "B",
          "explanation": "You cannot use a condition like `x > 3` in a case.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "int value = 2;"
            },
            {
              "choiceLetter": "B",
              "content": "case x > 3:"
            },
            {
              "choiceLetter": "C",
              "content": "default:"
            },
            {
              "choiceLetter": "D",
              "content": "break;"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "What happens if no condition matches in `switch`?",
          "expectedAnswer": "C",
          "explanation": "The `default` block is executed.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Error"
            },
            {
              "choiceLetter": "B",
              "content": "Break"
            },
            {
              "choiceLetter": "C",
              "content": "Default block runs"
            },
            {
              "choiceLetter": "D",
              "content": "Continue silently"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "What is the result of:\n```cpp\nint x = 5;\nif (x = 0) cout << x;\n```",
          "expectedAnswer": "A",
          "explanation": "`x = 0` assigns 0, which is false, so `cout` isn't reached.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "0"
            },
            {
              "choiceLetter": "B",
              "content": "5"
            },
            {
              "choiceLetter": "C",
              "content": "Error"
            },
            {
              "choiceLetter": "D",
              "content": "Nothing"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "Which structure is better for multiple constant comparisons?",
          "expectedAnswer": "B",
          "explanation": "`switch` is more concise for constant values.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "if"
            },
            {
              "choiceLetter": "B",
              "content": "switch"
            },
            {
              "choiceLetter": "C",
              "content": "for"
            },
            {
              "choiceLetter": "D",
              "content": "while"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "Why use `else if` instead of multiple `if`s?",
          "expectedAnswer": "C",
          "explanation": "Only one `if`/`else if` branch executes.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "It\u2019s shorter"
            },
            {
              "choiceLetter": "B",
              "content": "Better memory"
            },
            {
              "choiceLetter": "C",
              "content": "Avoids unnecessary checks"
            },
            {
              "choiceLetter": "D",
              "content": "It\u2019s required"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "What does this output?\n```cpp\nif (false) cout << 1; else cout << 2;\n```",
          "expectedAnswer": "D",
          "explanation": "`else` block runs because `false` is false.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "1"
            },
            {
              "choiceLetter": "B",
              "content": "false"
            },
            {
              "choiceLetter": "C",
              "content": "Error"
            },
            {
              "choiceLetter": "D",
              "content": "2"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "How can you combine multiple conditions?",
          "expectedAnswer": "A",
          "explanation": "Logical operators combine conditions.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Using && and ||"
            },
            {
              "choiceLetter": "B",
              "content": "Using commas"
            },
            {
              "choiceLetter": "C",
              "content": "Using break"
            },
            {
              "choiceLetter": "D",
              "content": "Using loop"
            }
          ]
        }
      ],
      "codingExercises": [
        {
          "title": "Check Even or Odd",
          "task": "Read an integer and print `Even` if it is even, otherwise print `Odd`.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int num;\n    cin >> num;\n    // Your code here\n    return 0;\n}",
          "difficulty": "EASY",
          "testCases": [
            {
              "input": "2",
              "output": "Even\n"
            },
            {
              "input": "3",
              "output": "Odd\n"
            },
            {
              "input": "0",
              "output": "Even\n"
            },
            {
              "input": "-1",
              "output": "Odd\n"
            },
            {
              "input": "-4",
              "output": "Even\n"
            }
          ],
          "hint": "Use the modulus operator `%` to check if the number is divisible by 2."
        },
        {
          "title": "Check Positive, Negative or Zero",
          "task": "Read an integer and print whether it is `Positive`, `Negative`, or `Zero`.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int x;\n    cin >> x;\n    // Your code here\n    return 0;\n}",
          "difficulty": "EASY",
          "testCases": [
            {
              "input": "5",
              "output": "Positive\n"
            },
            {
              "input": "0",
              "output": "Zero\n"
            },
            {
              "input": "-5",
              "output": "Negative\n"
            },
            {
              "input": "100",
              "output": "Positive\n"
            },
            {
              "input": "-1",
              "output": "Negative\n"
            }
          ],
          "hint": "Use if-else statements to check whether the number is > 0, < 0, or == 0."
        },
        {
          "title": "Find Maximum of Two Numbers",
          "task": "Read two integers and print the larger one.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int a, b;\n    cin >> a >> b;\n    // Your code here\n    return 0;\n}",
          "difficulty": "EASY",
          "testCases": [
            {
              "input": "5 10",
              "output": "10\n"
            },
            {
              "input": "100 50",
              "output": "100\n"
            },
            {
              "input": "-1 -5",
              "output": "-1\n"
            },
            {
              "input": "0 0",
              "output": "0\n"
            },
            {
              "input": "3 7",
              "output": "7\n"
            }
          ],
          "hint": "Use a simple if-else statement or the ternary operator to compare two values."
        },
        {
          "title": "Check Leap Year",
          "task": "Read a year and print `Leap` if it is a leap year, otherwise print `Not Leap`.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int year;\n    cin >> year;\n    // Your code here\n    return 0;\n}",
          "difficulty": "MEDIUM",
          "testCases": [
            {
              "input": "2020",
              "output": "Leap\n"
            },
            {
              "input": "1900",
              "output": "Not Leap\n"
            },
            {
              "input": "2000",
              "output": "Leap\n"
            },
            {
              "input": "2023",
              "output": "Not Leap\n"
            },
            {
              "input": "2400",
              "output": "Leap\n"
            }
          ],
          "hint": "Use leap year rules: divisible by 4, not by 100 unless divisible by 400."
        },
        {
          "title": "Grade Checker",
          "task": "Read a score (0-100) and print a grade: A (>=90), B (>=80), C (>=70), D (>=60), F (<60).",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int score;\n    cin >> score;\n    // Your code here\n    return 0;\n}",
          "difficulty": "MEDIUM",
          "testCases": [
            {
              "input": "95",
              "output": "A\n"
            },
            {
              "input": "82",
              "output": "B\n"
            },
            {
              "input": "70",
              "output": "C\n"
            },
            {
              "input": "60",
              "output": "D\n"
            },
            {
              "input": "50",
              "output": "F\n"
            }
          ],
          "hint": "Use chained if-else statements to determine the correct grade based on score."
        },
        {
          "title": "Absolute Value",
          "task": "Read an integer and print its absolute value.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int x;\n    cin >> x;\n    // Your code here\n    return 0;\n}",
          "difficulty": "MEDIUM",
          "testCases": [
            {
              "input": "-10",
              "output": "10\n"
            },
            {
              "input": "0",
              "output": "0\n"
            },
            {
              "input": "50",
              "output": "50\n"
            },
            {
              "input": "-999",
              "output": "999\n"
            },
            {
              "input": "100",
              "output": "100\n"
            }
          ],
          "hint": "Use `abs(x)` or check if x < 0 and multiply by -1."
        },
        {
          "title": "Compare Three Numbers",
          "task": "Read three integers and print the largest one.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int a, b, c;\n    cin >> a >> b >> c;\n    // Your code here\n    return 0;\n}",
          "difficulty": "HARD",
          "testCases": [
            {
              "input": "10 20 50",
              "output": "50\n"
            },
            {
              "input": "1 2 3",
              "output": "3\n"
            },
            {
              "input": "-1 -5 -3",
              "output": "-1\n"
            },
            {
              "input": "0 0 0",
              "output": "0\n"
            },
            {
              "input": "99 100 98",
              "output": "100\n"
            }
          ],
          "hint": "Use nested if or multiple comparisons to find the largest among three values."
        },
        {
          "title": "Nested Conditions",
          "task": "Read two integers. If both are positive, print their sum. If both negative, print their product. Otherwise, print 0.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int a, b;\n    cin >> a >> b;\n    // Your code here\n    return 0;\n}",
          "difficulty": "HARD",
          "testCases": [
            {
              "input": "5 5",
              "output": "10\n"
            },
            {
              "input": "-2 -3",
              "output": "6\n"
            },
            {
              "input": "10 -5",
              "output": "0\n"
            },
            {
              "input": "0 0",
              "output": "0\n"
            },
            {
              "input": "-1 1",
              "output": "0\n"
            }
          ],
          "hint": "Use if-else logic to check signs of both numbers and apply the right operation."
        },
        {
          "title": "Odd Number Checker",
          "task": "Read an integer and check if it's an odd number between 10 and 99. Print `Yes` or `No`.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int x;\n    cin >> x;\n    // Your code here\n    return 0;\n}",
          "difficulty": "HARD",
          "testCases": [
            {
              "input": "11",
              "output": "Yes\n"
            },
            {
              "input": "10",
              "output": "No\n"
            },
            {
              "input": "99",
              "output": "Yes\n"
            },
            {
              "input": "100",
              "output": "No\n"
            },
            {
              "input": "55",
              "output": "Yes\n"
            }
          ],
          "hint": "Use `%` to check if odd and also check if the number is within the 10\u201399 range."
        }
      ]
    },
    {
      "skillName": "Loops and Iteration",
      "skillOrder": 6,
      "difficulty": "MEDIUM",
      "lessonBubbles": [
        {
          "bubbleOrder": 1,
          "content": "**Introduction to Loops**\n\nLoops allow you to repeat code multiple times. C++ provides several loop types:\n- `while`\n- `do-while`\n- `for`",
          "contentType": "TEXT",
          "difficulty": "EASY",
          "topic": "Overview"
        },
        {
          "bubbleOrder": 2,
          "content": "**The `while` Loop**\n\nExecutes code while a condition is true:\n```cpp\nint i = 0;\nwhile (i < 5) {\n  cout << i << endl;\n  i++;\n}\n```",
          "contentType": "TEXT",
          "difficulty": "EASY",
          "topic": "While Loop"
        },
        {
          "bubbleOrder": 3,
          "content": "**The `do-while` Loop**\n\nExecutes code **at least once**, then checks the condition:\n```cpp\nint i = 0;\ndo {\n  cout << i << endl;\n  i++;\n} while (i < 5);\n```",
          "contentType": "TEXT",
          "difficulty": "EASY",
          "topic": "Do-While Loop"
        },
        {
          "bubbleOrder": 4,
          "content": "**The `for` Loop**\n\nGreat for counting or fixed iterations:\n```cpp\nfor (int i = 0; i < 5; i++) {\n  cout << i << endl;\n}\n```",
          "contentType": "TEXT",
          "difficulty": "EASY",
          "topic": "For Loop"
        },
        {
          "bubbleOrder": 5,
          "content": "**Loop Control: `break` and `continue`**\n\n- `break`: exit the loop\n- `continue`: skip to next iteration\n```cpp\nfor (int i = 0; i < 5; i++) {\n  if (i == 3) continue;\n  cout << i << endl;\n}\n```",
          "contentType": "TEXT",
          "difficulty": "MEDIUM",
          "topic": "Control Flow"
        },
        {
          "bubbleOrder": 6,
          "content": "**Nested Loops**\n\nLoops can go inside other loops:\n```cpp\nfor (int i = 0; i < 3; i++) {\n  for (int j = 0; j < 2; j++) {\n    cout << i << j << endl;\n  }\n}\n```",
          "contentType": "TEXT",
          "difficulty": "MEDIUM",
          "topic": "Nested Loops"
        },
        {
          "bubbleOrder": 7,
          "content": "**Infinite Loops**\n\nA loop without an exit condition will run forever:\n```cpp\nwhile (true) {\n  // danger: no break\n}\n```\nAlways ensure a clear way to stop the loop.",
          "contentType": "TEXT",
          "difficulty": "MEDIUM",
          "topic": "Infinite Loops"
        },
        {
          "bubbleOrder": 8,
          "content": "**Loop Off-by-One Error**\n\nThis happens when a loop iterates one time too many or too few:\n```cpp\nfor (int i = 0; i <= 10; i++) {...}  // 11 times\nfor (int i = 0; i < 10; i++) {...}   // 10 times\n```",
          "contentType": "TEXT",
          "difficulty": "HARD",
          "topic": "Off-by-One"
        },
        {
          "bubbleOrder": 9,
          "content": "**Choosing the Right Loop**\n\n- Use `for` when the number of iterations is known\n- Use `while` when the condition must be checked first\n- Use `do-while` when the loop must run at least once",
          "contentType": "TEXT",
          "difficulty": "HARD",
          "topic": "Loop Choice"
        },
        {
          "bubbleOrder": 10,
          "content": "**Loops with User Input**\n\n```cpp\nint num;\nwhile (cin >> num) {\n  cout << \"You entered: \" << num << endl;\n}\n```\nThis loop continues until input fails (e.g. non-number).",
          "contentType": "TEXT",
          "difficulty": "HARD",
          "topic": "Loop Input"
        }
      ],
      "quizQuestions": [
        {
          "difficulty": "EASY",
          "question": "Which loop checks the condition *before* executing the body?",
          "expectedAnswer": "A",
          "explanation": "`while` checks the condition before running.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "while"
            },
            {
              "choiceLetter": "B",
              "content": "do-while"
            },
            {
              "choiceLetter": "C",
              "content": "for"
            },
            {
              "choiceLetter": "D",
              "content": "if"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "What is the output of:\n```cpp\nfor (int i = 0; i < 3; i++) cout << i;\n```",
          "expectedAnswer": "C",
          "explanation": "`i` goes from 0 to 2.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "0123"
            },
            {
              "choiceLetter": "B",
              "content": "123"
            },
            {
              "choiceLetter": "C",
              "content": "012"
            },
            {
              "choiceLetter": "D",
              "content": "01"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "Which loop always runs at least once?",
          "expectedAnswer": "B",
          "explanation": "`do-while` runs before checking the condition.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "while"
            },
            {
              "choiceLetter": "B",
              "content": "do-while"
            },
            {
              "choiceLetter": "C",
              "content": "for"
            },
            {
              "choiceLetter": "D",
              "content": "None"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "Which statement exits a loop?",
          "expectedAnswer": "C",
          "explanation": "`break` is used to exit a loop.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "next"
            },
            {
              "choiceLetter": "B",
              "content": "stop"
            },
            {
              "choiceLetter": "C",
              "content": "break"
            },
            {
              "choiceLetter": "D",
              "content": "exit"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "Which loop is best for a known number of repetitions?",
          "expectedAnswer": "C",
          "explanation": "`for` loops are ideal when repetition count is known.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "while"
            },
            {
              "choiceLetter": "B",
              "content": "do-while"
            },
            {
              "choiceLetter": "C",
              "content": "for"
            },
            {
              "choiceLetter": "D",
              "content": "if"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "What does `continue` do in a loop?",
          "expectedAnswer": "D",
          "explanation": "`continue` skips to the next iteration.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Stops program"
            },
            {
              "choiceLetter": "B",
              "content": "Ends loop"
            },
            {
              "choiceLetter": "C",
              "content": "Skips to end"
            },
            {
              "choiceLetter": "D",
              "content": "Skips current iteration"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "What is wrong here?\n```cpp\nfor (int i = 0; i < 5; i--)\n```",
          "expectedAnswer": "B",
          "explanation": "`i--` decreases forever - it never meets `i < 5`.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Nothing"
            },
            {
              "choiceLetter": "B",
              "content": "Infinite loop"
            },
            {
              "choiceLetter": "C",
              "content": "Syntax error"
            },
            {
              "choiceLetter": "D",
              "content": "Skips numbers"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "Which loop reads user input until failure?",
          "expectedAnswer": "C",
          "explanation": "This idiom reads input until it fails.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "for"
            },
            {
              "choiceLetter": "B",
              "content": "do-while"
            },
            {
              "choiceLetter": "C",
              "content": "while (cin >> x)"
            },
            {
              "choiceLetter": "D",
              "content": "infinite loop"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "How many times will this run?\n```cpp\nfor (int i = 0; i <= 4; i++)\n```",
          "expectedAnswer": "C",
          "explanation": "It runs with i = 0 to 4 \u2014 5 times.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "4"
            },
            {
              "choiceLetter": "B",
              "content": "3"
            },
            {
              "choiceLetter": "C",
              "content": "5"
            },
            {
              "choiceLetter": "D",
              "content": "6"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "Which keyword skips to the next iteration?",
          "expectedAnswer": "D",
          "explanation": "`continue` skips the current run.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "break"
            },
            {
              "choiceLetter": "B",
              "content": "pass"
            },
            {
              "choiceLetter": "C",
              "content": "return"
            },
            {
              "choiceLetter": "D",
              "content": "continue"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "What is a potential issue with `while (true)`?",
          "expectedAnswer": "A",
          "explanation": "It creates infinite loops if no `break` is included.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Infinite loop risk"
            },
            {
              "choiceLetter": "B",
              "content": "Syntax error"
            },
            {
              "choiceLetter": "C",
              "content": "Wrong comparison"
            },
            {
              "choiceLetter": "D",
              "content": "None"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "Which scenario best fits a `do-while` loop?",
          "expectedAnswer": "B",
          "explanation": "Menus need to show at least once.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Repeat known 5 times"
            },
            {
              "choiceLetter": "B",
              "content": "Get menu input at least once"
            },
            {
              "choiceLetter": "C",
              "content": "Check condition first"
            },
            {
              "choiceLetter": "D",
              "content": "None"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "What\u2019s the output?\n```cpp\nint i=0;\ndo { cout << i; } while (i++ < 2);\n```",
          "expectedAnswer": "C",
          "explanation": "Loop runs i=0, 1, 2 then exits.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "01"
            },
            {
              "choiceLetter": "B",
              "content": "0123"
            },
            {
              "choiceLetter": "C",
              "content": "012"
            },
            {
              "choiceLetter": "D",
              "content": "None"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "Which of the following causes an off-by-one error?",
          "expectedAnswer": "D",
          "explanation": "Using `<=` when you need `<` adds an extra run.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "int i = 0; i < 10; i++"
            },
            {
              "choiceLetter": "B",
              "content": "int i = 1; i <= 10; i++"
            },
            {
              "choiceLetter": "C",
              "content": "i++ inside loop"
            },
            {
              "choiceLetter": "D",
              "content": "i <= 10 when it should be i < 10"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "How to safely exit a loop on user input?",
          "expectedAnswer": "A",
          "explanation": "Use `break` when a user types something specific.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Use `break` on condition"
            },
            {
              "choiceLetter": "B",
              "content": "Use `goto`"
            },
            {
              "choiceLetter": "C",
              "content": "Use exception"
            },
            {
              "choiceLetter": "D",
              "content": "Use infinite loop"
            }
          ]
        }
      ],
      "codingExercises": [
        {
          "title": "Print Numbers 1 to N",
          "task": "Read an integer N and print numbers from 1 to N on a single line separated by spaces.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    // Your code here\n    return 0;\n}",
          "difficulty": "EASY",
          "testCases": [
            {
              "input": "5",
              "output": "1 2 3 4 5 \n"
            },
            {
              "input": "3",
              "output": "1 2 3 \n"
            },
            {
              "input": "1",
              "output": "1 \n"
            },
            {
              "input": "0",
              "output": "\n"
            },
            {
              "input": "7",
              "output": "1 2 3 4 5 6 7 \n"
            }
          ],
          "hint": "Use a for loop from 1 to N and print each number followed by a space."
        },
        {
          "title": "Print Even Numbers",
          "task": "Print all even numbers from 1 to N inclusive, separated by spaces.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    // Your code here\n    return 0;\n}",
          "difficulty": "EASY",
          "testCases": [
            {
              "input": "6",
              "output": "2 4 6 \n"
            },
            {
              "input": "1",
              "output": "\n"
            },
            {
              "input": "2",
              "output": "2 \n"
            },
            {
              "input": "3",
              "output": "2 \n"
            },
            {
              "input": "10",
              "output": "2 4 6 8 10 \n"
            }
          ],
          "hint": "Use a loop with condition `i % 2 == 0` to print even numbers."
        },
        {
          "title": "Print Stars",
          "task": "Read an integer N and print N lines of stars. Each line should contain 1 to N stars respectively.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    // Your code here\n    return 0;\n}",
          "difficulty": "EASY",
          "testCases": [
            {
              "input": "3",
              "output": "*\n**\n***\n"
            },
            {
              "input": "1",
              "output": "*\n"
            },
            {
              "input": "0",
              "output": ""
            },
            {
              "input": "2",
              "output": "*\n**\n"
            },
            {
              "input": "4",
              "output": "*\n**\n***\n****\n"
            }
          ],
          "hint": "Use nested loops: one for the lines, another for the stars on each line."
        },
        {
          "title": "Sum of First N Numbers",
          "task": "Read a number N and print the sum of the first N natural numbers.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    // Your code here\n    return 0;\n}",
          "difficulty": "MEDIUM",
          "testCases": [
            {
              "input": "5",
              "output": "15\n"
            },
            {
              "input": "1",
              "output": "1\n"
            },
            {
              "input": "0",
              "output": "0\n"
            },
            {
              "input": "10",
              "output": "55\n"
            },
            {
              "input": "100",
              "output": "5050\n"
            }
          ],
          "hint": "Use a loop to accumulate the sum from 1 to N."
        },
        {
          "title": "Factorial of a Number",
          "task": "Read a number N and print its factorial (N!). Assume N is non-negative and less than 13.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    // Your code here\n    return 0;\n}",
          "difficulty": "MEDIUM",
          "testCases": [
            {
              "input": "5",
              "output": "120\n"
            },
            {
              "input": "0",
              "output": "1\n"
            },
            {
              "input": "1",
              "output": "1\n"
            },
            {
              "input": "3",
              "output": "6\n"
            },
            {
              "input": "6",
              "output": "720\n"
            }
          ],
          "hint": "Multiply numbers from 1 to N using a loop."
        },
        {
          "title": "Print a Multiplication Table",
          "task": "Read an integer N and print the multiplication table for N up to 10.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    // Your code here\n    return 0;\n}",
          "difficulty": "MEDIUM",
          "testCases": [
            {
              "input": "5",
              "output": "5 x 1 = 5\n5 x 2 = 10\n5 x 3 = 15\n5 x 4 = 20\n5 x 5 = 25\n5 x 6 = 30\n5 x 7 = 35\n5 x 8 = 40\n5 x 9 = 45\n5 x 10 = 50\n"
            },
            {
              "input": "2",
              "output": "2 x 1 = 2\n2 x 2 = 4\n2 x 3 = 6\n2 x 4 = 8\n2 x 5 = 10\n2 x 6 = 12\n2 x 7 = 14\n2 x 8 = 16\n2 x 9 = 18\n2 x 10 = 20\n"
            },
            {
              "input": "1",
              "output": "1 x 1 = 1\n1 x 2 = 2\n1 x 3 = 3\n1 x 4 = 4\n1 x 5 = 5\n1 x 6 = 6\n1 x 7 = 7\n1 x 8 = 8\n1 x 9 = 9\n1 x 10 = 10\n"
            }
          ],
          "hint": "Loop from 1 to 10 and multiply N with each counter."
        },
        {
          "title": "Count Digits in a Number",
          "task": "Read an integer N and print the number of digits in it.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    // Your code here\n    return 0;\n}",
          "difficulty": "HARD",
          "testCases": [
            {
              "input": "123",
              "output": "3\n"
            },
            {
              "input": "0",
              "output": "1\n"
            },
            {
              "input": "9",
              "output": "1\n"
            },
            {
              "input": "1000",
              "output": "4\n"
            },
            {
              "input": "99999",
              "output": "5\n"
            }
          ],
          "hint": "Use a while loop: divide the number by 10 until it becomes 0 and count steps."
        },
        {
          "title": "Sum of Digits",
          "task": "Read a number N and print the sum of its digits.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    // Your code here\n    return 0;\n}",
          "difficulty": "HARD",
          "testCases": [
            {
              "input": "123",
              "output": "6\n"
            },
            {
              "input": "0",
              "output": "0\n"
            },
            {
              "input": "111",
              "output": "3\n"
            },
            {
              "input": "999",
              "output": "27\n"
            },
            {
              "input": "1001",
              "output": "2\n"
            }
          ],
          "hint": "Extract each digit using `% 10`, add it to a sum, and divide number by 10."
        },
        {
          "title": "Reverse a Number",
          "task": "Read an integer N and print its digits reversed (e.g., 123 becomes 321).",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    // Your code here\n    return 0;\n}",
          "difficulty": "HARD",
          "testCases": [
            {
              "input": "123",
              "output": "321\n"
            },
            {
              "input": "100",
              "output": "1\n"
            },
            {
              "input": "9876",
              "output": "6789\n"
            },
            {
              "input": "0",
              "output": "0\n"
            },
            {
              "input": "5001",
              "output": "1005\n"
            }
          ],
          "hint": "Use `% 10` to get digits and build reverse by multiplying previous result by 10."
        }
      ]
    },
    {
      "skillName": "Functions and Parameters",
      "skillOrder": 7,
      "difficulty": "MEDIUM",
      "lessonBubbles": [
        {
          "bubbleOrder": 1,
          "content": "**What is a Function?**\n\nA function is a reusable block of code that performs a specific task. It helps organize code into logical units and avoid repetition.",
          "contentType": "TEXT",
          "difficulty": "EASY",
          "topic": "Function Basics"
        },
        {
          "bubbleOrder": 2,
          "content": "**Declaring and Defining Functions**\n\n```cpp\nint add(int a, int b) {\n    return a + b;\n}\n```\n- `int` is the return type\n- `add` is the function name\n- `a` and `b` are parameters",
          "contentType": "TEXT",
          "difficulty": "EASY",
          "topic": "Function Syntax"
        },
        {
          "bubbleOrder": 3,
          "content": "**Calling a Function**\n\nOnce defined, use the function like this:\n```cpp\nint result = add(2, 3);\ncout << result;\n```",
          "contentType": "TEXT",
          "difficulty": "EASY",
          "topic": "Function Call"
        },
        {
          "bubbleOrder": 4,
          "content": "**Function Parameters and Return Values**\n\n- Parameters pass input to the function\n- The `return` statement sends a result back\n\nFunctions can also return `void` (no return value).",
          "contentType": "TEXT",
          "difficulty": "MEDIUM",
          "topic": "Parameters and Return"
        },
        {
          "bubbleOrder": 5,
          "content": "**Void Functions**\n\n```cpp\nvoid greet() {\n    cout << \"Hello!\" << endl;\n}\n\ngreet();\n```\nVoid functions perform actions but do not return a value.",
          "contentType": "TEXT",
          "difficulty": "MEDIUM",
          "topic": "Void Function"
        },
        {
          "bubbleOrder": 6,
          "content": "**Function Overloading**\n\nYou can define multiple functions with the same name but different parameters:\n```cpp\nint square(int x) { return x * x; }\ndouble square(double x) { return x * x; }\n```",
          "contentType": "TEXT",
          "difficulty": "MEDIUM",
          "topic": "Overloading"
        },
        {
          "bubbleOrder": 7,
          "content": "**Scope of Variables**\n\nVariables declared inside a function are local:\n```cpp\nvoid show() {\n  int x = 10; // local to show()\n}\n```\nThey cannot be accessed outside the function.",
          "contentType": "TEXT",
          "difficulty": "MEDIUM",
          "topic": "Scope"
        },
        {
          "bubbleOrder": 8,
          "content": "**Default Parameters**\n\nYou can provide default values in the declaration:\n```cpp\nvoid display(string msg = \"Hi\") {\n    cout << msg;\n}\n\ndisplay(); // prints \"Hi\"",
          "contentType": "TEXT",
          "difficulty": "HARD",
          "topic": "Default Arguments"
        },
        {
          "bubbleOrder": 9,
          "content": "**Returning Multiple Values**\n\nFunctions in C++ return one value. To return more:\n- Use reference parameters\n- Return a `struct` or `pair`\n\n```cpp\npair<int, int> swap(int a, int b) {...}\n```",
          "contentType": "TEXT",
          "difficulty": "HARD",
          "topic": "Multiple Returns"
        },
        {
          "bubbleOrder": 10,
          "content": "**Common Function Mistakes**\n\n- Forgetting to return a value\n- Mismatched parameter types\n- Calling before definition (if not declared earlier)\n\nUse forward declarations if needed.",
          "contentType": "TEXT",
          "difficulty": "HARD",
          "topic": "Common Mistakes"
        }
      ],
      "quizQuestions": [
        {
          "difficulty": "EASY",
          "question": "What keyword is used to define a function that returns nothing?",
          "expectedAnswer": "B",
          "explanation": "`void` is the correct return type for functions with no return.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "empty"
            },
            {
              "choiceLetter": "B",
              "content": "void"
            },
            {
              "choiceLetter": "C",
              "content": "int"
            },
            {
              "choiceLetter": "D",
              "content": "null"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "What is the correct way to call a function named `sum` with 2 arguments?",
          "expectedAnswer": "A",
          "explanation": "`sum(2, 3);` correctly calls the function.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "sum(2, 3);"
            },
            {
              "choiceLetter": "B",
              "content": "sum = 2 + 3"
            },
            {
              "choiceLetter": "C",
              "content": "call sum"
            },
            {
              "choiceLetter": "D",
              "content": "function sum(2, 3)"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "Where can a local variable inside a function be accessed?",
          "expectedAnswer": "D",
          "explanation": "Local variables are accessible only within the function.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Anywhere in program"
            },
            {
              "choiceLetter": "B",
              "content": "In all functions"
            },
            {
              "choiceLetter": "C",
              "content": "Only in main"
            },
            {
              "choiceLetter": "D",
              "content": "Only within that function"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "What is the return type of this function?\n```cpp\nint multiply(int a, int b);\n```",
          "expectedAnswer": "A",
          "explanation": "`int` is the return type.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "int"
            },
            {
              "choiceLetter": "B",
              "content": "void"
            },
            {
              "choiceLetter": "C",
              "content": "double"
            },
            {
              "choiceLetter": "D",
              "content": "string"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "What happens if a function forgets to return a value?",
          "expectedAnswer": "B",
          "explanation": "Omitting return in non-void functions causes issues.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "It returns 0"
            },
            {
              "choiceLetter": "B",
              "content": "It causes undefined behavior"
            },
            {
              "choiceLetter": "C",
              "content": "It works fine"
            },
            {
              "choiceLetter": "D",
              "content": "The compiler ignores it"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "What is function overloading?",
          "expectedAnswer": "C",
          "explanation": "Overloading allows same function name with different inputs.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Calling a function multiple times"
            },
            {
              "choiceLetter": "B",
              "content": "Having a loop in function"
            },
            {
              "choiceLetter": "C",
              "content": "Functions with same name but different parameters"
            },
            {
              "choiceLetter": "D",
              "content": "Functions calling themselves"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "What is the output?\n```cpp\nvoid greet(string msg = \"Hello\") { cout << msg; }\ngreet();\n```",
          "expectedAnswer": "A",
          "explanation": "Default value is used if no argument is passed.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Hello"
            },
            {
              "choiceLetter": "B",
              "content": "msg"
            },
            {
              "choiceLetter": "C",
              "content": "Nothing"
            },
            {
              "choiceLetter": "D",
              "content": "Error"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "Which allows a function to return multiple values?",
          "expectedAnswer": "D",
          "explanation": "Use `pair`, `tuple`, or `struct` for multiple returns.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "int"
            },
            {
              "choiceLetter": "B",
              "content": "void"
            },
            {
              "choiceLetter": "C",
              "content": "double"
            },
            {
              "choiceLetter": "D",
              "content": "pair or struct"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "What will happen if parameters don\u2019t match in type?",
          "expectedAnswer": "C",
          "explanation": "Type mismatch leads to a compile error.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Compiler adjusts"
            },
            {
              "choiceLetter": "B",
              "content": "Returns void"
            },
            {
              "choiceLetter": "C",
              "content": "Compilation error"
            },
            {
              "choiceLetter": "D",
              "content": "It runs slower"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "Which scope does this belong to?\n```cpp\nvoid test() {\n  int x = 5;\n}\n```",
          "expectedAnswer": "B",
          "explanation": "`x` exists only inside `test()`.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Global"
            },
            {
              "choiceLetter": "B",
              "content": "Local to test"
            },
            {
              "choiceLetter": "C",
              "content": "Public"
            },
            {
              "choiceLetter": "D",
              "content": "Static"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "What\u2019s wrong?\n```cpp\nint add(int a, int b) {\n  cout << a + b;\n}\n```",
          "expectedAnswer": "A",
          "explanation": "It doesn\u2019t return a value despite declared return type.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Missing return"
            },
            {
              "choiceLetter": "B",
              "content": "Wrong syntax"
            },
            {
              "choiceLetter": "C",
              "content": "Needs void"
            },
            {
              "choiceLetter": "D",
              "content": "Extra semicolon"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "Choose valid overloaded functions:",
          "expectedAnswer": "B",
          "explanation": "Different parameter types allow overloading.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "`int func(int); void func(int);`"
            },
            {
              "choiceLetter": "B",
              "content": "`int func(int); double func(double);`"
            },
            {
              "choiceLetter": "C",
              "content": "`void func(); void func();`"
            },
            {
              "choiceLetter": "D",
              "content": "`None of the above`"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "What\u2019s required before calling a function declared later?",
          "expectedAnswer": "C",
          "explanation": "You must declare it first.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Definition"
            },
            {
              "choiceLetter": "B",
              "content": "Return"
            },
            {
              "choiceLetter": "C",
              "content": "Declaration/prototype"
            },
            {
              "choiceLetter": "D",
              "content": "Nothing"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "How can you avoid polluting global scope in functions?",
          "expectedAnswer": "D",
          "explanation": "Local variables help manage scope.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Use `auto`"
            },
            {
              "choiceLetter": "B",
              "content": "Use `global`"
            },
            {
              "choiceLetter": "C",
              "content": "Use `return`"
            },
            {
              "choiceLetter": "D",
              "content": "Keep variables local"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "Which is a benefit of functions?",
          "expectedAnswer": "A",
          "explanation": "Functions encourage DRY \u2014 Don\u2019t Repeat Yourself.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Code reuse"
            },
            {
              "choiceLetter": "B",
              "content": "Slower programs"
            },
            {
              "choiceLetter": "C",
              "content": "Higher memory use"
            },
            {
              "choiceLetter": "D",
              "content": "More repetition"
            }
          ]
        }
      ],
      "codingExercises": [
        {
          "title": "Function to Add Two Numbers",
          "task": "Write a function `int add(int a, int b)` that returns the sum of two integers.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint add(int a, int b) {\n    // Your code here\n}\n\nint main() {\n    int a, b;\n    cin >> a >> b;\n    cout << add(a, b);\n    return 0;\n}",
          "difficulty": "EASY",
          "testCases": [
            {
              "input": "10 5",
              "output": "15\n"
            },
            {
              "input": "3 4",
              "output": "7\n"
            },
            {
              "input": "0 0",
              "output": "0\n"
            },
            {
              "input": "-2 2",
              "output": "0\n"
            },
            {
              "input": "123 456",
              "output": "579\n"
            }
          ],
          "hint": "Use the `+` operator to return the sum of the two integers."
        },
        {
          "title": "Function to Multiply Numbers",
          "task": "Write a function `int multiply(int x, int y)` that returns the product of two integers.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint multiply(int x, int y) {\n    // Your code here\n}\n\nint main() {\n    int x, y;\n    cin >> x >> y;\n    cout << multiply(x, y);\n    return 0;\n}",
          "difficulty": "EASY",
          "testCases": [
            {
              "input": "4 5",
              "output": "20\n"
            },
            {
              "input": "10 0",
              "output": "0\n"
            },
            {
              "input": "1 9",
              "output": "9\n"
            },
            {
              "input": "-3 2",
              "output": "-6\n"
            },
            {
              "input": "-3 -3",
              "output": "9\n"
            }
          ],
          "hint": "Use the `*` operator to return the product of the two integers."
        },
        {
          "title": "Function to Return Maximum",
          "task": "Write a function `int maxOfTwo(int a, int b)` that returns the larger of two numbers.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint maxOfTwo(int a, int b) {\n    // Your code here\n}\n\nint main() {\n    int a, b;\n    cin >> a >> b;\n    cout << maxOfTwo(a, b);\n    return 0;\n}",
          "difficulty": "EASY",
          "testCases": [
            {
              "input": "50 40",
              "output": "50\n"
            },
            {
              "input": "10 90",
              "output": "90\n"
            },
            {
              "input": "100 100",
              "output": "100\n"
            },
            {
              "input": "0 1",
              "output": "1\n"
            },
            {
              "input": "-2 -1",
              "output": "-1\n"
            }
          ],
          "hint": "Use an `if` or ternary operator to return the larger of the two values."
        },
        {
          "title": "Function to Check Prime",
          "task": "Write a function `bool isPrime(int n)` that returns true if n is prime.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nbool isPrime(int n) {\n    // Your code here\n}\n\nint main() {\n    int n;\n    cin >> n;\n    cout << (isPrime(n) ? \"YES\" : \"NO\");\n    return 0;\n}",
          "difficulty": "MEDIUM",
          "testCases": [
            {
              "input": "2",
              "output": "YES"
            },
            {
              "input": "3",
              "output": "YES"
            },
            {
              "input": "4",
              "output": "NO"
            },
            {
              "input": "17",
              "output": "YES"
            },
            {
              "input": "20",
              "output": "NO"
            }
          ],
          "hint": "Check divisibility from 2 to sqrt(n) and return false if any factor is found."
        },
        {
          "title": "Function to Calculate Power",
          "task": "Write a function `int power(int base, int exp)` that returns base raised to exp.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint power(int base, int exp) {\n    // Your code here\n}\n\nint main() {\n    int base, exp;\n    cin >> base >> exp;\n    cout << power(base, exp);\n    return 0;\n}",
          "difficulty": "MEDIUM",
          "testCases": [
            {
              "input": "3 3",
              "output": "27\n"
            },
            {
              "input": "2 5",
              "output": "32\n"
            },
            {
              "input": "5 0",
              "output": "1\n"
            },
            {
              "input": "10 1",
              "output": "10\n"
            },
            {
              "input": "1 100",
              "output": "1\n"
            }
          ],
          "hint": "Use a loop to multiply the base by itself exp times."
        },
        {
          "title": "Function to Reverse a String",
          "task": "Write a function `string reverseStr(string s)` that returns the reverse of the string.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nstring reverseStr(string s) {\n    // Your code here\n}\n\nint main() {\n    string s;\n    cin >> s;\n    cout << reverseStr(s);\n    return 0;\n}",
          "difficulty": "MEDIUM",
          "testCases": [
            {
              "input": "abc",
              "output": "cba\n"
            },
            {
              "input": "hello",
              "output": "olleh\n"
            },
            {
              "input": "a",
              "output": "a\n"
            },
            {
              "input": "racecar",
              "output": "racecar\n"
            },
            {
              "input": "test",
              "output": "tset\n"
            }
          ],
          "hint": "Use a loop or two-pointer method to reverse the characters in the string."
        },
        {
          "title": "Recursive Factorial Function",
          "task": "Write a recursive function `int factorial(int n)` to compute the factorial of a number.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    // Your code here\n}\n\nint main() {\n    int n;\n    cin >> n;\n    cout << factorial(n);\n    return 0;\n}",
          "difficulty": "HARD",
          "testCases": [
            {
              "input": "5",
              "output": "120\n"
            },
            {
              "input": "0",
              "output": "1\n"
            },
            {
              "input": "1",
              "output": "1\n"
            },
            {
              "input": "3",
              "output": "6\n"
            },
            {
              "input": "6",
              "output": "720\n"
            }
          ],
          "hint": "Use base case `n == 0` and recursive call `n * factorial(n - 1)`."
        },
        {
          "title": "GCD Using Euclidean Algorithm",
          "task": "Write a function `int gcd(int a, int b)` using recursion that returns the greatest common divisor.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint gcd(int a, int b) {\n    // Your code here\n}\n\nint main() {\n    int a, b;\n    cin >> a >> b;\n    cout << gcd(a, b);\n    return 0;\n}",
          "difficulty": "HARD",
          "testCases": [
            {
              "input": "12 18",
              "output": "6\n"
            },
            {
              "input": "100 10",
              "output": "10\n"
            },
            {
              "input": "17 5",
              "output": "1\n"
            },
            {
              "input": "27 9",
              "output": "9\n"
            },
            {
              "input": "81 153",
              "output": "9\n"
            }
          ],
          "hint": "Apply the Euclidean Algorithm: `gcd(a, b) = gcd(b, a % b)`."
        },
        {
          "title": "Fibonacci using Recursion",
          "task": "Write a function `int fibonacci(int n)` that returns the nth Fibonacci number. Base: 0, 1.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint fibonacci(int n) {\n    // Your code here\n}\n\nint main() {\n    int n;\n    cin >> n;\n    cout << fibonacci(n);\n    return 0;\n}",
          "difficulty": "HARD",
          "testCases": [
            {
              "input": "5",
              "output": "5\n"
            },
            {
              "input": "0",
              "output": "0\n"
            },
            {
              "input": "1",
              "output": "1\n"
            },
            {
              "input": "6",
              "output": "8\n"
            },
            {
              "input": "8",
              "output": "21\n"
            }
          ],
          "hint": "Use base cases for 0 and 1, then `fibonacci(n-1) + fibonacci(n-2)` recursively."
        }
      ]
    },
    {
      "skillName": "Arrays and Strings",
      "skillOrder": 8,
      "difficulty": "MEDIUM",
      "lessonBubbles": [
        {
          "bubbleOrder": 1,
          "content": "**What is an Array?**\n\nAn array stores a fixed-size sequence of elements of the same type.\n```cpp\nint scores[5];\n```",
          "contentType": "TEXT",
          "difficulty": "EASY",
          "topic": "Introduction"
        },
        {
          "bubbleOrder": 2,
          "content": "**Initializing Arrays**\n\nYou can provide values directly:\n```cpp\nint nums[3] = {1, 2, 3};\n```",
          "contentType": "TEXT",
          "difficulty": "EASY",
          "topic": "Initialization"
        },
        {
          "bubbleOrder": 3,
          "content": "**Accessing Elements**\n\nUse indices starting from 0:\n```cpp\ncout << nums[1];  // prints 2\n```",
          "contentType": "TEXT",
          "difficulty": "EASY",
          "topic": "Indexing"
        },
        {
          "bubbleOrder": 4,
          "content": "**Looping Through Arrays**\n\n```cpp\nfor (int i = 0; i < 3; i++) {\n    cout << nums[i];\n}\n```",
          "contentType": "TEXT",
          "difficulty": "MEDIUM",
          "topic": "Iteration"
        },
        {
          "bubbleOrder": 5,
          "content": "**Common Mistake: Out-of-Bounds Access**\n\nAccessing past the end of an array causes undefined behavior:\n```cpp\nnums[10] = 99;  // \u274c\n```",
          "contentType": "TEXT",
          "difficulty": "MEDIUM",
          "topic": "Bounds"
        },
        {
          "bubbleOrder": 6,
          "content": "**Multidimensional Arrays**\n\n```cpp\nint matrix[2][3] = {\n    {1, 2, 3},\n    {4, 5, 6}\n};\ncout << matrix[1][2]; // prints 6\n```",
          "contentType": "TEXT",
          "difficulty": "MEDIUM",
          "topic": "2D Arrays"
        },
        {
          "bubbleOrder": 7,
          "content": "**C-Style Strings**\n\nC++ arrays of characters ending with `\\0`:\n```cpp\nchar name[] = \"Alex\";\n```",
          "contentType": "TEXT",
          "difficulty": "MEDIUM",
          "topic": "C Strings"
        },
        {
          "bubbleOrder": 8,
          "content": "**Using `std::string`**\n\nModern and safer than char arrays:\n```cpp\n#include <string>\nstring name = \"Alex\";\ncout << name.length();\n```",
          "contentType": "TEXT",
          "difficulty": "EASY",
          "topic": "std::string"
        },
        {
          "bubbleOrder": 9,
          "content": "**Modifying `std::string`**\n\n```cpp\nstring msg = \"Hi\";\nmsg += \" there!\";\ncout << msg;  // Hi there!\n```",
          "contentType": "TEXT",
          "difficulty": "HARD",
          "topic": "String Append"
        },
        {
          "bubbleOrder": 10,
          "content": "**Comparing Strings**\n\nUse `==` for `std::string`, but `strcmp` for C-style strings:\n```cpp\nstring a = \"hello\";\nif (a == \"hello\") {...}\n```",
          "contentType": "TEXT",
          "difficulty": "HARD",
          "topic": "String Compare"
        }
      ],
      "quizQuestions": [
        {
          "difficulty": "EASY",
          "question": "What is the index of the first element in an array?",
          "expectedAnswer": "A",
          "explanation": "Arrays in C++ start at index 0.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "0"
            },
            {
              "choiceLetter": "B",
              "content": "1"
            },
            {
              "choiceLetter": "C",
              "content": "Depends on type"
            },
            {
              "choiceLetter": "D",
              "content": "Undefined"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "Which syntax correctly defines an array of 5 integers?",
          "expectedAnswer": "B",
          "explanation": "`int arr[5];` is the correct syntax.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "int arr(5);"
            },
            {
              "choiceLetter": "B",
              "content": "int arr[5];"
            },
            {
              "choiceLetter": "C",
              "content": "array<int> arr;"
            },
            {
              "choiceLetter": "D",
              "content": "int arr;"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "What is printed?\n```cpp\nint a[3] = {1, 2, 3};\ncout << a[1];\n```",
          "expectedAnswer": "C",
          "explanation": "Index 1 accesses the second element.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "1"
            },
            {
              "choiceLetter": "B",
              "content": "3"
            },
            {
              "choiceLetter": "C",
              "content": "2"
            },
            {
              "choiceLetter": "D",
              "content": "0"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "Which header is needed for `std::string`?",
          "expectedAnswer": "A",
          "explanation": "`#include <string>` is required.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "<string>"
            },
            {
              "choiceLetter": "B",
              "content": "<cstring>"
            },
            {
              "choiceLetter": "C",
              "content": "<iostream>"
            },
            {
              "choiceLetter": "D",
              "content": "<char>"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "Which type is used for C-style strings?",
          "expectedAnswer": "B",
          "explanation": "C-style strings use `char[]`.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "std::string"
            },
            {
              "choiceLetter": "B",
              "content": "char array"
            },
            {
              "choiceLetter": "C",
              "content": "int*"
            },
            {
              "choiceLetter": "D",
              "content": "string[]"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "How many elements does `int b[10];` hold?",
          "expectedAnswer": "D",
          "explanation": "The size is 10.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "9"
            },
            {
              "choiceLetter": "B",
              "content": "11"
            },
            {
              "choiceLetter": "C",
              "content": "0"
            },
            {
              "choiceLetter": "D",
              "content": "10"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "What does this print?\n```cpp\nstring name = \"C++\";\ncout << name.length();\n```",
          "expectedAnswer": "A",
          "explanation": "The length is 3.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "3"
            },
            {
              "choiceLetter": "B",
              "content": "2"
            },
            {
              "choiceLetter": "C",
              "content": "4"
            },
            {
              "choiceLetter": "D",
              "content": "Error"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "What causes undefined behavior in arrays?",
          "expectedAnswer": "C",
          "explanation": "Accessing outside array bounds is undefined.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Initial value 0"
            },
            {
              "choiceLetter": "B",
              "content": "Empty loop"
            },
            {
              "choiceLetter": "C",
              "content": "Out-of-bounds access"
            },
            {
              "choiceLetter": "D",
              "content": "int type"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "Which is valid for appending to a `std::string`?",
          "expectedAnswer": "D",
          "explanation": "`+=` is valid for `std::string`.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "name << \"test\""
            },
            {
              "choiceLetter": "B",
              "content": "name =+ \"test\""
            },
            {
              "choiceLetter": "C",
              "content": "add(name, \"test\")"
            },
            {
              "choiceLetter": "D",
              "content": "name += \"test\""
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "Which is valid 2D array declaration?",
          "expectedAnswer": "B",
          "explanation": "`int arr[2][3];` is valid.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "int arr[][];"
            },
            {
              "choiceLetter": "B",
              "content": "int arr[2][3];"
            },
            {
              "choiceLetter": "C",
              "content": "int[2,3] arr;"
            },
            {
              "choiceLetter": "D",
              "content": "int arr(2,3);"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "How are C-style strings terminated?",
          "expectedAnswer": "A",
          "explanation": "C strings must end with `\\0`.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Null character `\\0`"
            },
            {
              "choiceLetter": "B",
              "content": "Comma"
            },
            {
              "choiceLetter": "C",
              "content": "Newline"
            },
            {
              "choiceLetter": "D",
              "content": "Period"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "Which function compares C-style strings?",
          "expectedAnswer": "C",
          "explanation": "Use `strcmp()` to compare C strings.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "equals()"
            },
            {
              "choiceLetter": "B",
              "content": "=="
            },
            {
              "choiceLetter": "C",
              "content": "strcmp()"
            },
            {
              "choiceLetter": "D",
              "content": "compare()"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "What is wrong?\n```cpp\nint x[2] = {1, 2, 3};\n```",
          "expectedAnswer": "B",
          "explanation": "Only 2 elements allowed, but 3 provided.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Nothing"
            },
            {
              "choiceLetter": "B",
              "content": "Too many initializers"
            },
            {
              "choiceLetter": "C",
              "content": "Missing semicolon"
            },
            {
              "choiceLetter": "D",
              "content": "Wrong type"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "Which is safest for string manipulation in C++?",
          "expectedAnswer": "D",
          "explanation": "`std::string` manages memory and is safe.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "char[]"
            },
            {
              "choiceLetter": "B",
              "content": "char*"
            },
            {
              "choiceLetter": "C",
              "content": "C-style string"
            },
            {
              "choiceLetter": "D",
              "content": "std::string"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "What is printed?\n```cpp\nchar msg[] = \"hi\";\nprintf(\"%d\", sizeof(msg));\n```",
          "expectedAnswer": "C",
          "explanation": "`sizeof` counts characters + null terminator.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "2"
            },
            {
              "choiceLetter": "B",
              "content": "0"
            },
            {
              "choiceLetter": "C",
              "content": "3"
            },
            {
              "choiceLetter": "D",
              "content": "Error"
            }
          ]
        }
      ],
      "codingExercises": [
        {
          "title": "Sum of Array Elements",
          "task": "Read an integer N and then an array of N integers. Print the sum of the elements.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    int arr[N];\n    for(int i = 0; i < N; ++i) cin >> arr[i];\n    // Your code here\n    return 0;\n}",
          "difficulty": "EASY",
          "testCases": [
            {
              "input": "5\n1 2 3 4 5",
              "output": "15\n"
            },
            {
              "input": "3\n10 20 30",
              "output": "60\n"
            },
            {
              "input": "1\n100",
              "output": "100\n"
            },
            {
              "input": "4\n0 0 0 0",
              "output": "0\n"
            },
            {
              "input": "2\n-5 5",
              "output": "0\n"
            }
          ],
          "hint": "Loop through the array and accumulate the sum in a variable."
        },
        {
          "title": "Find Maximum in Array",
          "task": "Read an integer N followed by N integers. Print the maximum value.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    int arr[N];\n    for(int i = 0; i < N; ++i) cin >> arr[i];\n    // Your code here\n    return 0;\n}",
          "difficulty": "EASY",
          "testCases": [
            {
              "input": "5\n10 20 30 40 99",
              "output": "99\n"
            },
            {
              "input": "3\n5 5 5",
              "output": "5\n"
            },
            {
              "input": "1\n0",
              "output": "0\n"
            },
            {
              "input": "4\n-10 -20 -30 -1",
              "output": "-1\n"
            },
            {
              "input": "6\n1 3 5 7 9 2",
              "output": "9\n"
            }
          ],
          "hint": "Initialize a max variable and update it if a larger value is found while iterating."
        },
        {
          "title": "Length of a String",
          "task": "Read a string and print its length.",
          "starterCode": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string s;\n    cin >> s;\n    // Your code here\n    return 0;\n}",
          "difficulty": "EASY",
          "testCases": [
            {
              "input": "hello",
              "output": "5\n"
            },
            {
              "input": "a",
              "output": "1\n"
            },
            {
              "input": "openai",
              "output": "6\n"
            },
            {
              "input": "abc123",
              "output": "6\n"
            },
            {
              "input": "gpt",
              "output": "3\n"
            }
          ],
          "hint": "Use the `.length()` or `.size()` method of the string object."
        },
        {
          "title": "Reverse an Array",
          "task": "Read N integers into an array and print them in reverse order.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    int arr[N];\n    for(int i = 0; i < N; ++i) cin >> arr[i];\n    // Your code here\n    return 0;\n}",
          "difficulty": "MEDIUM",
          "testCases": [
            {
              "input": "5\n1 2 3 4 5",
              "output": "5 4 3 2 1 \n"
            },
            {
              "input": "3\n10 20 30",
              "output": "30 20 10 \n"
            },
            {
              "input": "1\n100",
              "output": "100 \n"
            },
            {
              "input": "4\n0 1 2 3",
              "output": "3 2 1 0 \n"
            },
            {
              "input": "2\n-1 1",
              "output": "1 -1 \n"
            }
          ],
          "hint": "Iterate the array from the end to the beginning and print elements."
        },
        {
          "title": "Count Vowels in a String",
          "task": "Read a string and print the number of vowels (a, e, i, o, u) in it.",
          "starterCode": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string s;\n    cin >> s;\n    // Your code here\n    return 0;\n}",
          "difficulty": "MEDIUM",
          "testCases": [
            {
              "input": "apple",
              "output": "2\n"
            },
            {
              "input": "banana",
              "output": "3\n"
            },
            {
              "input": "xyz",
              "output": "0\n"
            },
            {
              "input": "OpenAI",
              "output": "3\n"
            },
            {
              "input": "education",
              "output": "5\n"
            }
          ],
          "hint": "Loop through each character and check if it's a vowel (lower or upper case)."
        },
        {
          "title": "Check Palindrome",
          "task": "Read a string and print `Yes` if it is a palindrome, otherwise print `No`.",
          "starterCode": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string s;\n    cin >> s;\n    // Your code here\n    return 0;\n}",
          "difficulty": "MEDIUM",
          "testCases": [
            {
              "input": "madam",
              "output": "Yes\n"
            },
            {
              "input": "racecar",
              "output": "Yes\n"
            },
            {
              "input": "hello",
              "output": "No\n"
            },
            {
              "input": "noon",
              "output": "Yes\n"
            },
            {
              "input": "abc",
              "output": "No\n"
            }
          ],
          "hint": "Compare characters from the start and end moving inward, or reverse the string and compare."
        },
        {
          "title": "Second Largest Element",
          "task": "Read an array of N integers and print the second largest element. Assume N >= 2 and elements are distinct.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    int arr[N];\n    for(int i = 0; i < N; ++i) cin >> arr[i];\n    // Your code here\n    return 0;\n}",
          "difficulty": "HARD",
          "testCases": [
            {
              "input": "5\n10 20 30 40 50",
              "output": "40\n"
            },
            {
              "input": "3\n99 100 98",
              "output": "99\n"
            },
            {
              "input": "2\n5 7",
              "output": "5\n"
            },
            {
              "input": "4\n1 3 2 0",
              "output": "2\n"
            },
            {
              "input": "6\n3 5 1 4 2 6",
              "output": "5\n"
            }
          ],
          "hint": "Track both the largest and second largest values while iterating."
        },
        {
          "title": "Remove Duplicates from Array",
          "task": "Read an array and print unique elements in order of appearance.",
          "starterCode": "#include <iostream>\n#include <unordered_set>\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    int arr[N];\n    for (int i = 0; i < N; ++i) cin >> arr[i];\n    // Your code here\n    return 0;\n}",
          "difficulty": "HARD",
          "testCases": [
            {
              "input": "6\n1 2 2 3 3 1",
              "output": "1 2 3 \n"
            },
            {
              "input": "5\n5 5 5 5 5",
              "output": "5 \n"
            },
            {
              "input": "3\n1 2 3",
              "output": "1 2 3 \n"
            },
            {
              "input": "4\n4 4 3 3",
              "output": "4 3 \n"
            },
            {
              "input": "7\n1 1 2 2 3 3 1",
              "output": "1 2 3 \n"
            }
          ],
          "hint": "Use a set to track seen values and only print if not seen before."
        },
        {
          "title": "Longest Word in Sentence",
          "task": "Read a sentence and print the longest word. Words are space-separated.",
          "starterCode": "#include <iostream>\n#include <sstream>\nusing namespace std;\n\nint main() {\n    string line;\n    getline(cin, line);\n    // Your code here\n    return 0;\n}",
          "difficulty": "HARD",
          "testCases": [
            {
              "input": "I love programming",
              "output": "programming\n"
            },
            {
              "input": "AI is fun",
              "output": "fun\n"
            },
            {
              "input": "This is a test",
              "output": "This\n"
            },
            {
              "input": "C++ Java Python",
              "output": "Python\n"
            },
            {
              "input": "OpenAI builds GPT",
              "output": "OpenAI\n"
            }
          ],
          "hint": "Use a stringstream to split the sentence and track the longest word by length."
        }
      ]
    },
    {
      "skillName": "Pointers and Memory Management",
      "skillOrder": 9,
      "difficulty": "HARD",
      "lessonBubbles": [
        {
          "bubbleOrder": 1,
          "content": "**What is a Pointer?**\n\nA pointer stores the memory address of another variable:\n```cpp\nint x = 5;\nint* ptr = &x;\n```",
          "contentType": "CODE",
          "difficulty": "EASY",
          "topic": "Pointer Basics"
        },
        {
          "bubbleOrder": 2,
          "content": "**Dereferencing a Pointer**\n\nUse `*` to access the value pointed to:\n```cpp\ncout << *ptr;  // prints 5\n```",
          "contentType": "CODE",
          "difficulty": "EASY",
          "topic": "Dereferencing"
        },
        {
          "bubbleOrder": 3,
          "content": "**Null Pointers**\n\nA pointer can point to nothing:\n```cpp\nint* ptr = nullptr;\n```\nCheck before using:\n```cpp\nif (ptr != nullptr) {...}\n```",
          "contentType": "CODE",
          "difficulty": "EASY",
          "topic": "Null"
        },
        {
          "bubbleOrder": 4,
          "content": "**Pointer Arithmetic**\n\nPointers can be incremented or decremented:\n```cpp\nint arr[3] = {1, 2, 3};\nint* p = arr;\ncout << *(p + 1);  // prints 2\n```",
          "contentType": "CODE",
          "difficulty": "MEDIUM",
          "topic": "Pointer Arithmetic"
        },
        {
          "bubbleOrder": 5,
          "content": "**Dynamic Memory Allocation**\n\nUse `new` and `delete`:\n```cpp\nint* p = new int;\n*p = 10;\ndelete p;\n```",
          "contentType": "CODE",
          "difficulty": "MEDIUM",
          "topic": "Dynamic Memory"
        },
        {
          "bubbleOrder": 6,
          "content": "**Allocating Arrays with `new`**\n\n```cpp\nint* arr = new int[5];\n// use arr\ndelete[] arr;\n```",
          "contentType": "CODE",
          "difficulty": "MEDIUM",
          "topic": "Dynamic Arrays"
        },
        {
          "bubbleOrder": 7,
          "content": "**Dangling Pointers**\n\nHappens when memory is deleted but pointer is still used:\n```cpp\nint* p = new int(5);\ndelete p;\n*p = 10;  // \u274c\n```",
          "contentType": "CODE",
          "difficulty": "HARD",
          "topic": "Dangling"
        },
        {
          "bubbleOrder": 8,
          "content": "**Memory Leaks**\n\nOccurs when allocated memory isn\u2019t deleted:\n```cpp\nint* p = new int(100);\n// forget to delete p\n```",
          "contentType": "CODE",
          "difficulty": "HARD",
          "topic": "Leak"
        },
        {
          "bubbleOrder": 9,
          "content": "**`const` with Pointers**\n\n```cpp\nconst int* p1;   // can't change *p1\nint* const p2;   // can't change p2\nconst int* const p3; // neither\n```",
          "contentType": "CODE",
          "difficulty": "HARD",
          "topic": "Const Pointer"
        },
        {
          "bubbleOrder": 10,
          "content": "**Why Use Pointers?**\n\nPointers enable:\n- Dynamic memory\n- Efficient array traversal\n- Passing large data efficiently\n- Building data structures like linked lists",
          "contentType": "TEXT",
          "difficulty": "MEDIUM",
          "topic": "Use Cases"
        }
      ],
      "quizQuestions": [
        {
          "difficulty": "EASY",
          "question": "What symbol is used to declare a pointer?",
          "expectedAnswer": "B",
          "explanation": "`*` is used to declare a pointer.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "&"
            },
            {
              "choiceLetter": "B",
              "content": "*"
            },
            {
              "choiceLetter": "C",
              "content": "%"
            },
            {
              "choiceLetter": "D",
              "content": "#"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "Which operator gives the address of a variable?",
          "expectedAnswer": "A",
          "explanation": "`&` returns the memory address.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "&"
            },
            {
              "choiceLetter": "B",
              "content": "*"
            },
            {
              "choiceLetter": "C",
              "content": "@"
            },
            {
              "choiceLetter": "D",
              "content": "$"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "What is the default value of an uninitialized pointer?",
          "expectedAnswer": "D",
          "explanation": "Uninitialized pointers point to garbage.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "0"
            },
            {
              "choiceLetter": "B",
              "content": "1"
            },
            {
              "choiceLetter": "C",
              "content": "100"
            },
            {
              "choiceLetter": "D",
              "content": "Garbage or undefined"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "What does `nullptr` represent?",
          "expectedAnswer": "B",
          "explanation": "`nullptr` is used for null pointers in C++.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "An address"
            },
            {
              "choiceLetter": "B",
              "content": "A null pointer"
            },
            {
              "choiceLetter": "C",
              "content": "A number"
            },
            {
              "choiceLetter": "D",
              "content": "A string"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "How do you access the value pointed by a pointer?",
          "expectedAnswer": "C",
          "explanation": "Use `*` to dereference.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "&ptr"
            },
            {
              "choiceLetter": "B",
              "content": "ptr"
            },
            {
              "choiceLetter": "C",
              "content": "*ptr"
            },
            {
              "choiceLetter": "D",
              "content": "->ptr"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "What is the output?\n```cpp\nint x = 10;\nint* p = &x;\ncout << *p;\n```",
          "expectedAnswer": "A",
          "explanation": "`*p` accesses the value at x.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "10"
            },
            {
              "choiceLetter": "B",
              "content": "x"
            },
            {
              "choiceLetter": "C",
              "content": "&x"
            },
            {
              "choiceLetter": "D",
              "content": "Error"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "Which statement allocates memory for a single int?",
          "expectedAnswer": "C",
          "explanation": "Use `new int` to allocate.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "int x;"
            },
            {
              "choiceLetter": "B",
              "content": "int* x;"
            },
            {
              "choiceLetter": "C",
              "content": "int* x = new int;"
            },
            {
              "choiceLetter": "D",
              "content": "new int x;"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "Which statement deallocates memory from `new`?",
          "expectedAnswer": "D",
          "explanation": "`delete` deallocates memory from `new`.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "delete int;"
            },
            {
              "choiceLetter": "B",
              "content": "deallocate x;"
            },
            {
              "choiceLetter": "C",
              "content": "free(x);"
            },
            {
              "choiceLetter": "D",
              "content": "delete x;"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "What causes a memory leak?",
          "expectedAnswer": "C",
          "explanation": "Not deleting `new` memory causes leaks.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Using `nullptr`"
            },
            {
              "choiceLetter": "B",
              "content": "double deleting"
            },
            {
              "choiceLetter": "C",
              "content": "Forgetting to delete"
            },
            {
              "choiceLetter": "D",
              "content": "Using pointers"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "Which pointer type prevents modification of pointed data?",
          "expectedAnswer": "A",
          "explanation": "`const int*` prohibits value change.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "const int* p"
            },
            {
              "choiceLetter": "B",
              "content": "int* const p"
            },
            {
              "choiceLetter": "C",
              "content": "int const"
            },
            {
              "choiceLetter": "D",
              "content": "pointer<int>"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "What is wrong?\n```cpp\nint* p = new int;\ndelete p;\n*p = 5;\n```",
          "expectedAnswer": "C",
          "explanation": "Using pointer after `delete` is undefined.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Nothing"
            },
            {
              "choiceLetter": "B",
              "content": "Memory leak"
            },
            {
              "choiceLetter": "C",
              "content": "Dangling pointer"
            },
            {
              "choiceLetter": "D",
              "content": "Syntax error"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "Which statement is valid?\n```cpp\nint* const p = &x;\n```",
          "expectedAnswer": "B",
          "explanation": "`p` is fixed to that address.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "p can point to another variable"
            },
            {
              "choiceLetter": "B",
              "content": "p cannot be reassigned"
            },
            {
              "choiceLetter": "C",
              "content": "*p is const"
            },
            {
              "choiceLetter": "D",
              "content": "It allocates memory"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "What\u2019s the output?\n```cpp\nint arr[3] = {1,2,3};\nint* p = arr;\ncout << *(p+2);\n```",
          "expectedAnswer": "C",
          "explanation": "`*(p+2)` points to arr[2].",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "1"
            },
            {
              "choiceLetter": "B",
              "content": "2"
            },
            {
              "choiceLetter": "C",
              "content": "3"
            },
            {
              "choiceLetter": "D",
              "content": "Error"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "Which of the following avoids a memory leak?",
          "expectedAnswer": "D",
          "explanation": "Always `delete` allocated memory.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "new int"
            },
            {
              "choiceLetter": "B",
              "content": "delete[]"
            },
            {
              "choiceLetter": "C",
              "content": "free()"
            },
            {
              "choiceLetter": "D",
              "content": "delete after use"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "Which scenario causes a double delete error?",
          "expectedAnswer": "B",
          "explanation": "Deleting twice causes crash.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "No delete used"
            },
            {
              "choiceLetter": "B",
              "content": "delete p; delete p;"
            },
            {
              "choiceLetter": "C",
              "content": "Pointer initialized with nullptr"
            },
            {
              "choiceLetter": "D",
              "content": "Pointer reused"
            }
          ]
        }
      ],
      "codingExercises": [
        {
          "title": "Print Address of a Variable",
          "task": "Declare an integer and print its memory address using a pointer.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int x = 10;\n    // Your code here\n    return 0;\n}",
          "difficulty": "EASY",
          "testCases": [
            {
              "input": "",
              "output": "address\n"
            }
          ],
          "hint": "Use the `&` operator to get the memory address of a variable."
        },
        {
          "title": "Dereference a Pointer",
          "task": "Read an integer, store its address in a pointer, and print its value using dereferencing.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int x;\n    cin >> x;\n    // Your code here\n    return 0;\n}",
          "difficulty": "EASY",
          "testCases": [
            {
              "input": "10",
              "output": "10\n"
            },
            {
              "input": "5",
              "output": "5\n"
            },
            {
              "input": "-3",
              "output": "-3\n"
            },
            {
              "input": "0",
              "output": "0\n"
            },
            {
              "input": "999",
              "output": "999\n"
            }
          ],
          "hint": "Declare a pointer and use the `*` operator to access the value it points to."
        },
        {
          "title": "Swap Two Integers Using Pointers",
          "task": "Write a function that swaps two integers using pointers. Then print them after swapping.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nvoid swap(int* a, int* b) {\n    // Your code here\n}\n\nint main() {\n    int x, y;\n    cin >> x >> y;\n    swap(&x, &y);\n    cout << x << \" \" << y;\n    return 0;\n}",
          "difficulty": "EASY",
          "testCases": [
            {
              "input": "1 2",
              "output": "2 1\n"
            },
            {
              "input": "10 20",
              "output": "20 10\n"
            },
            {
              "input": "-1 -5",
              "output": "-5 -1\n"
            },
            {
              "input": "0 1",
              "output": "1 0\n"
            },
            {
              "input": "99 88",
              "output": "88 99\n"
            }
          ],
          "hint": "Use pointer dereferencing to exchange the values stored at the two addresses."
        },
        {
          "title": "Sum Array with Pointers",
          "task": "Read an array of N integers and compute the sum using a pointer to access the elements.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    int arr[n];\n    for (int i = 0; i < n; ++i) cin >> arr[i];\n    // Your code here\n    return 0;\n}",
          "difficulty": "MEDIUM",
          "testCases": [
            {
              "input": "5\n1 2 3 4 5",
              "output": "15\n"
            },
            {
              "input": "3\n10 20 30",
              "output": "60\n"
            },
            {
              "input": "2\n-1 -1",
              "output": "-2\n"
            },
            {
              "input": "1\n100",
              "output": "100\n"
            },
            {
              "input": "4\n0 0 0 0",
              "output": "0\n"
            }
          ],
          "hint": "Use pointer arithmetic to traverse the array and accumulate the sum."
        },
        {
          "title": "Access String Characters with Pointers",
          "task": "Read a string and use a pointer to print each character on a new line.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    char str[100];\n    cin >> str;\n    // Your code here\n    return 0;\n}",
          "difficulty": "MEDIUM",
          "testCases": [
            {
              "input": "Hello",
              "output": "H\ne\nl\nl\no\n"
            },
            {
              "input": "abc",
              "output": "a\nb\nc\n"
            },
            {
              "input": "A",
              "output": "A\n"
            },
            {
              "input": "test",
              "output": "t\ne\ns\nt\n"
            },
            {
              "input": "GPT",
              "output": "G\nP\nT\n"
            }
          ],
          "hint": "Increment the char pointer and print each character until the null terminator."
        },
        {
          "title": "Reverse Array Using Pointers",
          "task": "Read N integers into an array and reverse them in place using pointer manipulation.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nvoid reverseArray(int* arr, int n) {\n    // Your code here\n}\n\nint main() {\n    int n;\n    cin >> n;\n    int arr[n];\n    for (int i = 0; i < n; ++i) cin >> arr[i];\n    reverseArray(arr, n);\n    for (int i = 0; i < n; ++i) cout << arr[i] << \" \";\n    return 0;\n}",
          "difficulty": "MEDIUM",
          "testCases": [
            {
              "input": "5\n1 2 3 4 5",
              "output": "5 4 3 2 1 \n"
            },
            {
              "input": "3\n10 20 30",
              "output": "30 20 10 \n"
            },
            {
              "input": "1\n100",
              "output": "100 \n"
            },
            {
              "input": "2\n7 8",
              "output": "8 7 \n"
            },
            {
              "input": "4\n4 3 2 1",
              "output": "1 2 3 4 \n"
            }
          ],
          "hint": "Use two pointers: one at the start and one at the end, and swap until they meet."
        },
        {
          "title": "Dynamic Memory Allocation",
          "task": "Dynamically allocate an array of N integers, read values into it, then print their sum.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    int* arr = new int[n];\n    for (int i = 0; i < n; ++i) cin >> arr[i];\n    // Your code here\n    delete[] arr;\n    return 0;\n}",
          "difficulty": "HARD",
          "testCases": [
            {
              "input": "4\n1 2 3 4",
              "output": "10\n"
            },
            {
              "input": "1\n100",
              "output": "100\n"
            },
            {
              "input": "3\n10 0 -10",
              "output": "0\n"
            },
            {
              "input": "2\n-1 1",
              "output": "0\n"
            },
            {
              "input": "5\n5 5 5 5 5",
              "output": "25\n"
            }
          ],
          "hint": "Use `new` to allocate memory and `delete[]` to deallocate it properly."
        },
        {
          "title": "Pointer to Pointer",
          "task": "Declare an integer, a pointer to it, and a pointer to the pointer. Use them to print the value.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int x = 42;\n    int* p = &x;\n    int** pp = &p;\n    // Your code here\n    return 0;\n}",
          "difficulty": "HARD",
          "testCases": [
            {
              "input": "",
              "output": "42\n"
            }
          ],
          "hint": "Use double indirection (`**`) to access the original value."
        },
        {
          "title": "Allocate and Initialize Dynamic Matrix",
          "task": "Dynamically allocate a 2D matrix of size NxM and initialize all elements to a given value. Then print the matrix.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n, m, val;\n    cin >> n >> m >> val;\n    // Your code here\n    return 0;\n}",
          "difficulty": "HARD",
          "testCases": [
            {
              "input": "2 2 1",
              "output": "1 1\n1 1\n"
            },
            {
              "input": "1 3 7",
              "output": "7 7 7\n"
            },
            {
              "input": "3 1 5",
              "output": "5\n5\n5\n"
            },
            {
              "input": "2 3 9",
              "output": "9 9 9\n9 9 9\n"
            },
            {
              "input": "1 1 8",
              "output": "8\n"
            }
          ],
          "hint": "Use nested loops to allocate and initialize a 2D array with dynamic memory."
        }
      ]
    },
    {
      "skillName": "Object-Oriented Programming (OOP) in C++",
      "skillOrder": 10,
      "difficulty": "HARD",
      "lessonBubbles": [
        {
          "bubbleOrder": 1,
          "content": "**What is Object-Oriented Programming?**\n\nOOP organizes code using **objects** that contain data (attributes) and behaviors (methods). C++ supports all major OOP principles:\n- Encapsulation\n- Abstraction\n- Inheritance\n- Polymorphism",
          "contentType": "TEXT",
          "difficulty": "EASY",
          "topic": "OOP Introduction"
        },
        {
          "bubbleOrder": 2,
          "content": "**Defining a Class**\n\nA class is a blueprint for creating objects:\n```cpp\nclass Car {\n  public:\n    string brand;\n    void honk() { cout << \"Beep!\"; }\n};\n```",
          "contentType": "CODE",
          "difficulty": "EASY",
          "topic": "Class Basics"
        },
        {
          "bubbleOrder": 3,
          "content": "**Creating and Using Objects**\n\n```cpp\nCar myCar;\nmyCar.brand = \"Toyota\";\nmyCar.honk();\n```",
          "contentType": "CODE",
          "difficulty": "EASY",
          "topic": "Object Usage"
        },
        {
          "bubbleOrder": 4,
          "content": "**Encapsulation and Access Specifiers**\n\n- `public`: accessible from outside\n- `private`: accessible only within the class\n\nEncapsulation hides data and exposes only necessary parts.",
          "contentType": "TEXT",
          "difficulty": "MEDIUM",
          "topic": "Encapsulation"
        },
        {
          "bubbleOrder": 5,
          "content": "**Constructors and Destructors**\n\nConstructors initialize objects automatically:\n```cpp\nCar() { brand = \"Default\"; }\n```\nDestructors clean up:\n```cpp\n~Car() { cout << \"Destroying car\"; }\n```",
          "contentType": "CODE",
          "difficulty": "MEDIUM",
          "topic": "Constructors and Destructors"
        },
        {
          "bubbleOrder": 6,
          "content": "**Inheritance**\n\nOne class can inherit from another:\n```cpp\nclass ElectricCar : public Car {\n  public:\n    int batteryLife;\n};\n```",
          "contentType": "CODE",
          "difficulty": "MEDIUM",
          "topic": "Inheritance"
        },
        {
          "bubbleOrder": 7,
          "content": "**Overriding Inherited Methods**\n\n```cpp\nclass Animal {\n  public:\n    void speak() { cout << \"Sound\"; }\n};\n\nclass Dog : public Animal {\n  public:\n    void speak() { cout << \"Woof\"; }\n};\n```",
          "contentType": "CODE",
          "difficulty": "HARD",
          "topic": "Method Overriding"
        },
        {
          "bubbleOrder": 8,
          "content": "**Polymorphism with Virtual Functions**\n\nAllows base class pointers to call derived class methods:\n```cpp\nclass Animal { public: virtual void speak() {...} };\nclass Dog : public Animal { void speak() {...} };\n```",
          "contentType": "CODE",
          "difficulty": "HARD",
          "topic": "Polymorphism"
        },
        {
          "bubbleOrder": 9,
          "content": "**Abstract Classes and Pure Virtual Functions**\n\nAn abstract class has at least one pure virtual function:\n```cpp\nclass Shape {\n  public:\n    virtual void draw() = 0;\n};\n```",
          "contentType": "CODE",
          "difficulty": "HARD",
          "topic": "Abstract Classes"
        },
        {
          "bubbleOrder": 10,
          "content": "**Why Use OOP?**\n\nOOP helps:\n- Organize large programs\n- Promote reusability with inheritance\n- Create flexible code with polymorphism\n- Protect data using encapsulation",
          "contentType": "TEXT",
          "difficulty": "MEDIUM",
          "topic": "Benefits"
        }
      ],
      "quizQuestions": [
        {
          "difficulty": "EASY",
          "question": "What keyword defines a class in C++?",
          "expectedAnswer": "A",
          "explanation": "`class` is used to define a class.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "class"
            },
            {
              "choiceLetter": "B",
              "content": "struct"
            },
            {
              "choiceLetter": "C",
              "content": "object"
            },
            {
              "choiceLetter": "D",
              "content": "define"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "What is the default access modifier for class members?",
          "expectedAnswer": "B",
          "explanation": "Members are `private` by default.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "public"
            },
            {
              "choiceLetter": "B",
              "content": "private"
            },
            {
              "choiceLetter": "C",
              "content": "protected"
            },
            {
              "choiceLetter": "D",
              "content": "global"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "Which statement correctly creates an object?",
          "expectedAnswer": "C",
          "explanation": "`Car myCar;` declares an object.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "object Car;"
            },
            {
              "choiceLetter": "B",
              "content": "Car = new object;"
            },
            {
              "choiceLetter": "C",
              "content": "Car myCar;"
            },
            {
              "choiceLetter": "D",
              "content": "object myCar();"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "Which method automatically runs when an object is created?",
          "expectedAnswer": "D",
          "explanation": "Constructors run on object creation.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "main()"
            },
            {
              "choiceLetter": "B",
              "content": "init()"
            },
            {
              "choiceLetter": "C",
              "content": "create()"
            },
            {
              "choiceLetter": "D",
              "content": "constructor"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "Which keyword allows external access to a class member?",
          "expectedAnswer": "A",
          "explanation": "`public` allows external access.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "public"
            },
            {
              "choiceLetter": "B",
              "content": "private"
            },
            {
              "choiceLetter": "C",
              "content": "internal"
            },
            {
              "choiceLetter": "D",
              "content": "secure"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "What is encapsulation?",
          "expectedAnswer": "C",
          "explanation": "Encapsulation hides class internals.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Using loops"
            },
            {
              "choiceLetter": "B",
              "content": "Creating large classes"
            },
            {
              "choiceLetter": "C",
              "content": "Hiding internal data"
            },
            {
              "choiceLetter": "D",
              "content": "Accessing private members directly"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "Which function cleans up an object?",
          "expectedAnswer": "D",
          "explanation": "Destructors clean up on destruction.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "create()"
            },
            {
              "choiceLetter": "B",
              "content": "final()"
            },
            {
              "choiceLetter": "C",
              "content": "end()"
            },
            {
              "choiceLetter": "D",
              "content": "destructor"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "How does a derived class inherit from a base class?",
          "expectedAnswer": "A",
          "explanation": "Inheritance uses colon and access specifier.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "class Child : public Parent"
            },
            {
              "choiceLetter": "B",
              "content": "inherit Parent"
            },
            {
              "choiceLetter": "C",
              "content": "class Parent : Child"
            },
            {
              "choiceLetter": "D",
              "content": "public class Parent -> Child"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "Which is the correct way to define a constructor?",
          "expectedAnswer": "B",
          "explanation": "Constructors have no return type.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "void Car();"
            },
            {
              "choiceLetter": "B",
              "content": "Car() { brand = \"BMW\"; }"
            },
            {
              "choiceLetter": "C",
              "content": "int Car()"
            },
            {
              "choiceLetter": "D",
              "content": "create()"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "What is function overloading?",
          "expectedAnswer": "D",
          "explanation": "Overloading allows same name, different signatures.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Inheritance of class methods"
            },
            {
              "choiceLetter": "B",
              "content": "Calling many functions"
            },
            {
              "choiceLetter": "C",
              "content": "Chaining functions"
            },
            {
              "choiceLetter": "D",
              "content": "Same function name with different parameters"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "What is a pure virtual function?",
          "expectedAnswer": "C",
          "explanation": "`= 0` syntax declares a pure virtual function.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Function that always returns void"
            },
            {
              "choiceLetter": "B",
              "content": "Overloaded function"
            },
            {
              "choiceLetter": "C",
              "content": "Declared using `= 0`"
            },
            {
              "choiceLetter": "D",
              "content": "Default argument function"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "Which enables polymorphic behavior at runtime?",
          "expectedAnswer": "B",
          "explanation": "Virtual functions enable dynamic dispatch.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Private access"
            },
            {
              "choiceLetter": "B",
              "content": "Virtual functions"
            },
            {
              "choiceLetter": "C",
              "content": "Templates"
            },
            {
              "choiceLetter": "D",
              "content": "Friend class"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "Why use abstract classes?",
          "expectedAnswer": "A",
          "explanation": "Abstract classes cannot be instantiated.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Force subclasses to implement behavior"
            },
            {
              "choiceLetter": "B",
              "content": "Allow instantiation"
            },
            {
              "choiceLetter": "C",
              "content": "Reduce access"
            },
            {
              "choiceLetter": "D",
              "content": "Avoid constructors"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "Which function can be overridden in derived class?",
          "expectedAnswer": "C",
          "explanation": "Only virtual functions can be overridden.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Private function"
            },
            {
              "choiceLetter": "B",
              "content": "Static method"
            },
            {
              "choiceLetter": "C",
              "content": "Virtual function"
            },
            {
              "choiceLetter": "D",
              "content": "Constructor"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "What happens if a base class has a virtual destructor?",
          "expectedAnswer": "D",
          "explanation": "Ensures proper destructor chaining.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Syntax error"
            },
            {
              "choiceLetter": "B",
              "content": "Destructor isn\u2019t called"
            },
            {
              "choiceLetter": "C",
              "content": "Only base destructor runs"
            },
            {
              "choiceLetter": "D",
              "content": "Both base and derived destructors run"
            }
          ]
        }
      ],
      "codingExercises": [
        {
          "title": "Define a Simple Class",
          "task": "Create a class `Student` with a public member variable `name`. Read a name and print it using the class.",
          "starterCode": "#include <iostream>\n#include <string>\nusing namespace std;\n\nclass Student {\npublic:\n    string name;\n};\n\nint main() {\n    Student s;\n    // Your code here\n    return 0;\n}",
          "difficulty": "EASY",
          "testCases": [
            {
              "input": "John",
              "output": "John\n"
            },
            {
              "input": "Alice",
              "output": "Alice\n"
            },
            {
              "input": "Bob",
              "output": "Bob\n"
            },
            {
              "input": "Zara",
              "output": "Zara\n"
            },
            {
              "input": "Leo",
              "output": "Leo\n"
            }
          ],
          "hint": "Define a public member variable and assign input using an object instance."
        },
        {
          "title": "Add Method to Class",
          "task": "Create a class `Calculator` with a method `int add(int, int)` that returns the sum of two numbers.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nclass Calculator {\npublic:\n    // Your code here\n};\n\nint main() {\n    Calculator c;\n    int a, b;\n    cin >> a >> b;\n    cout << c.add(a, b);\n    return 0;\n}",
          "difficulty": "EASY",
          "testCases": [
            {
              "input": "10 20",
              "output": "30\n"
            },
            {
              "input": "0 0",
              "output": "0\n"
            },
            {
              "input": "-1 1",
              "output": "0\n"
            },
            {
              "input": "100 200",
              "output": "300\n"
            },
            {
              "input": "5 7",
              "output": "12\n"
            }
          ],
          "hint": "Define a method inside the class that takes parameters and returns their sum."
        },
        {
          "title": "Constructor Initialization",
          "task": "Create a class `Book` with a constructor that sets the `title`. Print the title from main.",
          "starterCode": "#include <iostream>\n#include <string>\nusing namespace std;\n\nclass Book {\npublic:\n    string title;\n    // Your code here\n};\n\nint main() {\n    string t;\n    cin >> t;\n    Book b(t);\n    cout << b.title;\n    return 0;\n}",
          "difficulty": "EASY",
          "testCases": [
            {
              "input": "C++",
              "output": "C++\n"
            },
            {
              "input": "Python",
              "output": "Python\n"
            },
            {
              "input": "OOP",
              "output": "OOP\n"
            },
            {
              "input": "Hello",
              "output": "Hello\n"
            },
            {
              "input": "AI",
              "output": "AI\n"
            }
          ],
          "hint": "Use a constructor to initialize the object with a value when created."
        },
        {
          "title": "Class with Private Member",
          "task": "Create a class `Circle` with a private member `radius`. Provide methods to set and get its value.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nclass Circle {\nprivate:\n    double radius;\npublic:\n    // Your code here\n};\n\nint main() {\n    Circle c;\n    double r;\n    cin >> r;\n    c.setRadius(r);\n    cout << c.getRadius();\n    return 0;\n}",
          "difficulty": "MEDIUM",
          "testCases": [
            {
              "input": "2.5",
              "output": "2.5\n"
            },
            {
              "input": "10.0",
              "output": "10\n"
            },
            {
              "input": "0",
              "output": "0\n"
            },
            {
              "input": "3.14",
              "output": "3.14\n"
            },
            {
              "input": "8.8",
              "output": "8.8\n"
            }
          ],
          "hint": "Use setter and getter methods to access a private variable from outside the class."
        },
        {
          "title": "Object Array",
          "task": "Create a class `Item` with an `id` field. Read N items into an array and print their IDs.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nclass Item {\npublic:\n    int id;\n};\n\nint main() {\n    int n;\n    cin >> n;\n    Item items[n];\n    for (int i = 0; i < n; ++i) cin >> items[i].id;\n    for (int i = 0; i < n; ++i) cout << items[i].id << \" \";\n    return 0;\n}",
          "difficulty": "MEDIUM",
          "testCases": [
            {
              "input": "3\n1 2 3",
              "output": "1 2 3 \n"
            },
            {
              "input": "2\n10 20",
              "output": "10 20 \n"
            },
            {
              "input": "1\n99",
              "output": "99 \n"
            },
            {
              "input": "4\n4 3 2 1",
              "output": "4 3 2 1 \n"
            },
            {
              "input": "5\n5 5 5 5 5",
              "output": "5 5 5 5 5 \n"
            }
          ],
          "hint": "Use a loop to fill an array of objects and another to print their fields."
        },
        {
          "title": "Method that Returns Area",
          "task": "Create a class `Rectangle` with members `width` and `height`, and a method to return area.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nclass Rectangle {\npublic:\n    int width, height;\n    // Your code here\n};\n\nint main() {\n    Rectangle r;\n    cin >> r.width >> r.height;\n    cout << r.area();\n    return 0;\n}",
          "difficulty": "MEDIUM",
          "testCases": [
            {
              "input": "10 5",
              "output": "50\n"
            },
            {
              "input": "1 1",
              "output": "1\n"
            },
            {
              "input": "0 10",
              "output": "0\n"
            },
            {
              "input": "7 3",
              "output": "21\n"
            },
            {
              "input": "4 4",
              "output": "16\n"
            }
          ],
          "hint": "Define a method that multiplies `width * height` and returns the result."
        },
        {
          "title": "Inheritance - Derived Class",
          "task": "Create a base class `Person` with a `name` and a derived class `Student` with an `id`. Print both values.",
          "starterCode": "#include <iostream>\n#include <string>\nusing namespace std;\n\nclass Person {\npublic:\n    string name;\n};\n\nclass Student : public Person {\npublic:\n    int id;\n};\n\nint main() {\n    Student s;\n    cin >> s.name >> s.id;\n    cout << s.name << \" \" << s.id;\n    return 0;\n}",
          "difficulty": "HARD",
          "testCases": [
            {
              "input": "Alice 123",
              "output": "Alice 123\n"
            },
            {
              "input": "Bob 456",
              "output": "Bob 456\n"
            },
            {
              "input": "John 1",
              "output": "John 1\n"
            },
            {
              "input": "Jane 42",
              "output": "Jane 42\n"
            },
            {
              "input": "Tom 0",
              "output": "Tom 0\n"
            }
          ],
          "hint": "Use the `:` syntax to create a derived class that inherits from the base."
        },
        {
          "title": "Class with Static Member",
          "task": "Create a class `Counter` with a static member that counts how many objects are created.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nclass Counter {\npublic:\n    static int count;\n    Counter() {\n        // Your code here\n    }\n};\n\nint Counter::count = 0;\n\nint main() {\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; ++i) {\n        Counter c;\n    }\n    cout << Counter::count;\n    return 0;\n}",
          "difficulty": "HARD",
          "testCases": [
            {
              "input": "3",
              "output": "3\n"
            },
            {
              "input": "0",
              "output": "0\n"
            },
            {
              "input": "5",
              "output": "5\n"
            },
            {
              "input": "1",
              "output": "1\n"
            },
            {
              "input": "10",
              "output": "10\n"
            }
          ],
          "hint": "Use a static variable inside the class and increment it in the constructor."
        },
        {
          "title": "Polymorphism with Virtual Function",
          "task": "Create a base class with a virtual `print()` method and a derived class that overrides it.",
          "starterCode": "#include <iostream>\nusing namespace std;\n\nclass Base {\npublic:\n    virtual void print() {\n        cout << \"Base\";\n    }\n};\n\nclass Derived : public Base {\npublic:\n    void print() override {\n        cout << \"Derived\";\n    }\n};\n\nint main() {\n    Base* b;\n    Derived d;\n    b = &d;\n    b->print();\n    return 0;\n}",
          "difficulty": "HARD",
          "testCases": [
            {
              "input": "",
              "output": "Derived\n"
            }
          ],
          "hint": "Use a virtual function in the base class and override it in the derived class."
        }
      ]
    },
    {
      "skillName": "File Input and Output (File I/O) in C++",
      "skillOrder": 11,
      "difficulty": "HARD",
      "lessonBubbles": [
        {
          "bubbleOrder": 1,
          "content": "**What is File I/O?**\n\nFile I/O allows programs to **read from** and **write to** files stored on disk, using streams like `ifstream` and `ofstream`.",
          "contentType": "TEXT",
          "difficulty": "EASY",
          "topic": "Introduction"
        },
        {
          "bubbleOrder": 2,
          "content": "**Writing to a File**\n\n```cpp\n#include <fstream>\nusing namespace std;\n\nofstream outFile(\"data.txt\");\noutFile << \"Hello File!\";\noutFile.close();\n```",
          "contentType": "CODE",
          "difficulty": "EASY",
          "topic": "Writing Files"
        },
        {
          "bubbleOrder": 3,
          "content": "**Reading from a File**\n\n```cpp\nifstream inFile(\"data.txt\");\nstring line;\ngetline(inFile, line);\ncout << line;\ninFile.close();\n```",
          "contentType": "CODE",
          "difficulty": "EASY",
          "topic": "Reading Files"
        },
        {
          "bubbleOrder": 4,
          "content": "**Checking File Status**\n\nAlways check if the file opened successfully:\n```cpp\nifstream file(\"data.txt\");\nif (!file) {\n  cout << \"Failed to open\";\n}\n```",
          "contentType": "CODE",
          "difficulty": "MEDIUM",
          "topic": "File Validation"
        },
        {
          "bubbleOrder": 5,
          "content": "**Looping Through a File**\n\n```cpp\nifstream file(\"log.txt\");\nstring line;\nwhile (getline(file, line)) {\n  cout << line << endl;\n}\n```",
          "contentType": "CODE",
          "difficulty": "MEDIUM",
          "topic": "Reading Line-by-Line"
        },
        {
          "bubbleOrder": 6,
          "content": "**File Open Modes**\n\nYou can open files with different modes:\n- `ios::app` \u2192 append to file\n- `ios::trunc` \u2192 overwrite\n- `ios::in` / `ios::out` \u2192 input/output\n\nCombine with `|` operator.",
          "contentType": "TEXT",
          "difficulty": "MEDIUM",
          "topic": "Open Modes"
        },
        {
          "bubbleOrder": 7,
          "content": "**Appending to a File**\n\n```cpp\nofstream log(\"log.txt\", ios::app);\nlog << \"New log entry\";\nlog.close();\n```",
          "contentType": "CODE",
          "difficulty": "MEDIUM",
          "topic": "Append Mode"
        },
        {
          "bubbleOrder": 8,
          "content": "**Reading Integers from a File**\n\n```cpp\nifstream input(\"numbers.txt\");\nint x;\nwhile (input >> x) {\n  cout << x << \" \";\n}\n```",
          "contentType": "CODE",
          "difficulty": "HARD",
          "topic": "Read by Type"
        },
        {
          "bubbleOrder": 9,
          "content": "**Detecting End of File**\n\nUse `eof()` to detect end of file:\n```cpp\nif (file.eof()) {\n  cout << \"Reached end.\";\n}\n```",
          "contentType": "CODE",
          "difficulty": "HARD",
          "topic": "EOF"
        },
        {
          "bubbleOrder": 10,
          "content": "**Common Pitfalls**\n\n- Not closing files\n- Reading past EOF\n- Overwriting files by accident\n\nAlways close files and check file status!",
          "contentType": "TEXT",
          "difficulty": "HARD",
          "topic": "Pitfalls"
        }
      ],
      "quizQuestions": [
        {
          "difficulty": "EASY",
          "question": "Which header is required for file input/output?",
          "expectedAnswer": "A",
          "explanation": "`<fstream>` provides ifstream and ofstream.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "<fstream>"
            },
            {
              "choiceLetter": "B",
              "content": "<file>"
            },
            {
              "choiceLetter": "C",
              "content": "<stream>"
            },
            {
              "choiceLetter": "D",
              "content": "<input>"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "What does `ofstream` do?",
          "expectedAnswer": "B",
          "explanation": "`ofstream` is used to write.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Reads from a file"
            },
            {
              "choiceLetter": "B",
              "content": "Writes to a file"
            },
            {
              "choiceLetter": "C",
              "content": "Creates directories"
            },
            {
              "choiceLetter": "D",
              "content": "Prints to console"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "How do you close a file?",
          "expectedAnswer": "C",
          "explanation": "Use `.close()` to close streams.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "stop()"
            },
            {
              "choiceLetter": "B",
              "content": "end()"
            },
            {
              "choiceLetter": "C",
              "content": "close()"
            },
            {
              "choiceLetter": "D",
              "content": "exit()"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "What is the type of a text line read from file?",
          "expectedAnswer": "D",
          "explanation": "`getline()` stores text in a `string`.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "char"
            },
            {
              "choiceLetter": "B",
              "content": "int"
            },
            {
              "choiceLetter": "C",
              "content": "bool"
            },
            {
              "choiceLetter": "D",
              "content": "string"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "What operator is used for writing to a file?",
          "expectedAnswer": "A",
          "explanation": "The insertion operator `<<` is used.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "<<"
            },
            {
              "choiceLetter": "B",
              "content": ">>"
            },
            {
              "choiceLetter": "C",
              "content": "**"
            },
            {
              "choiceLetter": "D",
              "content": "::"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "Which function reads an entire line from a file?",
          "expectedAnswer": "B",
          "explanation": "`getline()` reads the whole line.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "readline()"
            },
            {
              "choiceLetter": "B",
              "content": "getline()"
            },
            {
              "choiceLetter": "C",
              "content": "nextline()"
            },
            {
              "choiceLetter": "D",
              "content": "input()"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "Which mode appends to the end of a file?",
          "expectedAnswer": "C",
          "explanation": "`ios::app` keeps old data.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "ios::trunc"
            },
            {
              "choiceLetter": "B",
              "content": "ios::in"
            },
            {
              "choiceLetter": "C",
              "content": "ios::app"
            },
            {
              "choiceLetter": "D",
              "content": "ios::read"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "What happens if a file fails to open?",
          "expectedAnswer": "A",
          "explanation": "You can test `if (!file)` to detect.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "The stream is falsy"
            },
            {
              "choiceLetter": "B",
              "content": "The program exits"
            },
            {
              "choiceLetter": "C",
              "content": "It creates a file"
            },
            {
              "choiceLetter": "D",
              "content": "It reads empty string"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "Which stream type is used for reading files?",
          "expectedAnswer": "B",
          "explanation": "`ifstream` is used for input.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "ofstream"
            },
            {
              "choiceLetter": "B",
              "content": "ifstream"
            },
            {
              "choiceLetter": "C",
              "content": "logfile"
            },
            {
              "choiceLetter": "D",
              "content": "cin"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "Which loop reads a file line-by-line?",
          "expectedAnswer": "A",
          "explanation": "This is the standard idiom for reading lines.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "while (getline(f, s))"
            },
            {
              "choiceLetter": "B",
              "content": "for each (s in file)"
            },
            {
              "choiceLetter": "C",
              "content": "loop (f, s)"
            },
            {
              "choiceLetter": "D",
              "content": "while (read(f, s))"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "Which operator reads values from a file?",
          "expectedAnswer": "C",
          "explanation": "`>>` extracts data.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "<<"
            },
            {
              "choiceLetter": "B",
              "content": "::"
            },
            {
              "choiceLetter": "C",
              "content": ">>"
            },
            {
              "choiceLetter": "D",
              "content": "<>"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "What does `file.eof()` return?",
          "expectedAnswer": "B",
          "explanation": "Returns true if EOF reached.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Last line of file"
            },
            {
              "choiceLetter": "B",
              "content": "True if at end"
            },
            {
              "choiceLetter": "C",
              "content": "File name"
            },
            {
              "choiceLetter": "D",
              "content": "Read error"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "What can cause a file overwrite?",
          "expectedAnswer": "C",
          "explanation": "`ios::trunc` erases contents.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "ifstream"
            },
            {
              "choiceLetter": "B",
              "content": "ios::app"
            },
            {
              "choiceLetter": "C",
              "content": "ios::trunc"
            },
            {
              "choiceLetter": "D",
              "content": "file.eof()"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "How do you combine file open modes?",
          "expectedAnswer": "D",
          "explanation": "`|` lets you combine `ios::out | ios::app`.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Using comma"
            },
            {
              "choiceLetter": "B",
              "content": "Using semicolon"
            },
            {
              "choiceLetter": "C",
              "content": "Using +"
            },
            {
              "choiceLetter": "D",
              "content": "Using |"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "Which statement best handles file errors?",
          "expectedAnswer": "A",
          "explanation": "Check if the file stream is falsy.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "if (!file)"
            },
            {
              "choiceLetter": "B",
              "content": "file.error()"
            },
            {
              "choiceLetter": "C",
              "content": "try file"
            },
            {
              "choiceLetter": "D",
              "content": "catch file"
            }
          ]
        }
      ],
      "codingExercises": [
        {
          "title": "Write to File",
          "task": "Write a program that creates a file called `output.txt` and writes `Hello, File!` to it.",
          "starterCode": "#include <fstream>\nusing namespace std;\n\nint main() {\n    // Your code here\n    return 0;\n}",
          "difficulty": "EASY",
          "testCases": [
            {
              "input": "",
              "output": "File created with content: Hello, File!\n"
            }
          ],
          "hint": "Use `ofstream` to open a file and write using `<<` operator."
        },
        {
          "title": "Read from File",
          "task": "Assuming a file `input.txt` exists with a single word, read and print it.",
          "starterCode": "#include <iostream>\n#include <fstream>\nusing namespace std;\n\nint main() {\n    // Your code here\n    return 0;\n}",
          "difficulty": "EASY",
          "testCases": [
            {
              "input": "input.txt content: Cplusplus",
              "output": "Cplusplus\n"
            }
          ],
          "hint": "Use `ifstream` to open the file and read contents using `>>` or `getline`."
        },
        {
          "title": "Read Integers from File",
          "task": "Assume `numbers.txt` has five integers separated by spaces. Print their sum.",
          "starterCode": "#include <iostream>\n#include <fstream>\nusing namespace std;\n\nint main() {\n    // Your code here\n    return 0;\n}",
          "difficulty": "EASY",
          "testCases": [
            {
              "input": "numbers.txt content: 1 2 3 4 5",
              "output": "15\n"
            },
            {
              "input": "numbers.txt content: 10 10 10 10 10",
              "output": "50\n"
            },
            {
              "input": "numbers.txt content: -1 -1 -1 -1 -1",
              "output": "-5\n"
            },
            {
              "input": "numbers.txt content: 0 0 0 0 0",
              "output": "0\n"
            },
            {
              "input": "numbers.txt content: 1 1 1 1 1",
              "output": "5\n"
            }
          ],
          "hint": "Use a loop and `ifstream` to read integers into variables and accumulate the sum."
        },
        {
          "title": "Count Lines in File",
          "task": "Read a file `lines.txt` and print the number of lines it contains.",
          "starterCode": "#include <iostream>\n#include <fstream>\n#include <string>\nusing namespace std;\n\nint main() {\n    // Your code here\n    return 0;\n}",
          "difficulty": "MEDIUM",
          "testCases": [
            {
              "input": "lines.txt content:\nA\nB\nC",
              "output": "3\n"
            },
            {
              "input": "lines.txt content:\nOne line",
              "output": "1\n"
            },
            {
              "input": "lines.txt content:\n",
              "output": "0\n"
            },
            {
              "input": "lines.txt content:\n1\n2\n3\n4",
              "output": "4\n"
            },
            {
              "input": "lines.txt content:\nHello\nWorld",
              "output": "2\n"
            }
          ],
          "hint": "Read each line in a loop using `getline()` and count how many times it runs."
        },
        {
          "title": "Copy File Content",
          "task": "Read from `source.txt` and write the same content into `copy.txt`.",
          "starterCode": "#include <fstream>\n#include <string>\nusing namespace std;\n\nint main() {\n    // Your code here\n    return 0;\n}",
          "difficulty": "MEDIUM",
          "testCases": [
            {
              "input": "source.txt content: Hello world",
              "output": "File copied\n"
            },
            {
              "input": "source.txt content: ABC",
              "output": "File copied\n"
            },
            {
              "input": "source.txt content: 123456",
              "output": "File copied\n"
            },
            {
              "input": "source.txt content: OpenAI",
              "output": "File copied\n"
            },
            {
              "input": "source.txt content: X",
              "output": "File copied\n"
            }
          ],
          "hint": "Read from `source.txt` and write each line or character to `copy.txt`."
        },
        {
          "title": "Sum Numbers from File",
          "task": "Each line of `data.txt` contains a number. Read all lines and print the total sum.",
          "starterCode": "#include <fstream>\n#include <iostream>\nusing namespace std;\n\nint main() {\n    // Your code here\n    return 0;\n}",
          "difficulty": "MEDIUM",
          "testCases": [
            {
              "input": "data.txt content:\n10\n20\n25",
              "output": "55\n"
            },
            {
              "input": "data.txt content:\n0\n0\n0",
              "output": "0\n"
            },
            {
              "input": "data.txt content:\n1\n1\n1\n1",
              "output": "4\n"
            },
            {
              "input": "data.txt content:\n100",
              "output": "100\n"
            },
            {
              "input": "data.txt content:\n-1\n1",
              "output": "0\n"
            }
          ],
          "hint": "Use `getline()` and convert strings to integers using `stoi()` or stream input."
        },
        {
          "title": "Sort Numbers from File",
          "task": "Read space-separated integers from `sort.txt`, sort them, and print in ascending order.",
          "starterCode": "#include <fstream>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    // Your code here\n    return 0;\n}",
          "difficulty": "HARD",
          "testCases": [
            {
              "input": "sort.txt content: 5 3 1 4 2",
              "output": "1 2 3 4 5 \n"
            },
            {
              "input": "sort.txt content: 10 9 8 7",
              "output": "7 8 9 10 \n"
            },
            {
              "input": "sort.txt content: 1",
              "output": "1 \n"
            },
            {
              "input": "sort.txt content: 3 2 1",
              "output": "1 2 3 \n"
            },
            {
              "input": "sort.txt content: -1 -3 -2",
              "output": "-3 -2 -1 \n"
            }
          ],
          "hint": "Read integers into a vector, sort using `sort()` from `<algorithm>`, then print."
        },
        {
          "title": "Word Frequency Counter",
          "task": "Count how many times each word appears in `words.txt` (space-separated). Output words and their count.",
          "starterCode": "#include <iostream>\n#include <fstream>\n#include <map>\n#include <sstream>\nusing namespace std;\n\nint main() {\n    // Your code here\n    return 0;\n}",
          "difficulty": "HARD",
          "testCases": [
            {
              "input": "words.txt content: hello world hello",
              "output": "hello: 2\nworld: 1\n"
            },
            {
              "input": "words.txt content: a b a b a",
              "output": "a: 3\nb: 2\n"
            },
            {
              "input": "words.txt content: test",
              "output": "test: 1\n"
            },
            {
              "input": "words.txt content: OpenAI GPT GPT OpenAI",
              "output": "OpenAI: 2\nGPT: 2\n"
            },
            {
              "input": "words.txt content: x y z x x",
              "output": "x: 3\ny: 1\nz: 1\n"
            }
          ],
          "hint": "Use `map<string, int>` and `stringstream` to split and count words."
        },
        {
          "title": "Merge Two Files",
          "task": "Read contents from `a.txt` and `b.txt`, and write merged content to `merged.txt` line by line.",
          "starterCode": "#include <fstream>\n#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    // Your code here\n    return 0;\n}",
          "difficulty": "HARD",
          "testCases": [
            {
              "input": "a.txt: A1\nA2\n, b.txt: B1\nB2\n",
              "output": "A1\nB1\nA2\nB2\n"
            },
            {
              "input": "a.txt: x\ny\n, b.txt: 1\n2\n",
              "output": "x\n1\ny\n2\n"
            },
            {
              "input": "a.txt: foo\n, b.txt: bar\n",
              "output": "foo\nbar\n"
            },
            {
              "input": "a.txt: apple\nbanana\n, b.txt: red\nyellow\n",
              "output": "apple\nred\nbanana\nyellow\n"
            },
            {
              "input": "a.txt: hello\n, b.txt: world\n",
              "output": "hello\nworld\n"
            }
          ],
          "hint": "Use two file streams and alternate reading lines to write them interleaved."
        }
      ]
    },
    {
      "skillName": "Introduction to the Standard Template Library (STL)",
      "skillOrder": 12,
      "difficulty": "HARD",
      "lessonBubbles": [
        {
          "bubbleOrder": 1,
          "content": "**What is the STL?**\n\nThe Standard Template Library (STL) provides reusable, generic data structures and algorithms in C++. It includes containers like `vector`, `map`, and `set`.",
          "contentType": "TEXT",
          "difficulty": "EASY",
          "topic": "STL Overview"
        },
        {
          "bubbleOrder": 2,
          "content": "**Using a Vector**\n\n```cpp\n#include <vector>\nusing namespace std;\n\nvector<int> nums = {1, 2, 3};\nnums.push_back(4);\ncout << nums[2];\n```",
          "contentType": "CODE",
          "difficulty": "EASY",
          "topic": "Vector"
        },
        {
          "bubbleOrder": 3,
          "content": "**Using a Map**\n\n```cpp\n#include <map>\nmap<string, int> scores;\nscores[\"Alice\"] = 90;\ncout << scores[\"Alice\"];\n```",
          "contentType": "CODE",
          "difficulty": "EASY",
          "topic": "Map"
        },
        {
          "bubbleOrder": 4,
          "content": "**Using a Set**\n\n```cpp\n#include <set>\nset<int> s;\ns.insert(10);\ns.insert(20);\n```",
          "contentType": "CODE",
          "difficulty": "EASY",
          "topic": "Set"
        },
        {
          "bubbleOrder": 5,
          "content": "**Iterating Through a Vector**\n\n```cpp\nfor (int n : nums) {\n  cout << n << \" \";\n}\n```",
          "contentType": "CODE",
          "difficulty": "MEDIUM",
          "topic": "Range-based Loop"
        },
        {
          "bubbleOrder": 6,
          "content": "**STL Iterators**\n\n```cpp\nvector<int>::iterator it;\nfor (it = nums.begin(); it != nums.end(); ++it) {\n  cout << *it;\n}\n```",
          "contentType": "CODE",
          "difficulty": "MEDIUM",
          "topic": "Iterators"
        },
        {
          "bubbleOrder": 7,
          "content": "**Sorting with STL**\n\n```cpp\n#include <algorithm>\nsort(nums.begin(), nums.end());\n```",
          "contentType": "CODE",
          "difficulty": "MEDIUM",
          "topic": "Sorting"
        },
        {
          "bubbleOrder": 8,
          "content": "**Using `find()`**\n\n```cpp\nauto it = find(nums.begin(), nums.end(), 3);\nif (it != nums.end()) {\n  cout << \"Found\";\n}\n```",
          "contentType": "CODE",
          "difficulty": "HARD",
          "topic": "Finding"
        },
        {
          "bubbleOrder": 9,
          "content": "**Pair and Tuple**\n\n```cpp\n#include <tuple>\npair<string, int> p = {\"Age\", 30};\nauto t = make_tuple(\"Tom\", 25, 3.14);\n```",
          "contentType": "CODE",
          "difficulty": "HARD",
          "topic": "Pair/Tuple"
        },
        {
          "bubbleOrder": 10,
          "content": "**Why STL Matters**\n\nSTL reduces code complexity, improves performance, and provides tested algorithms and data structures.",
          "contentType": "TEXT",
          "difficulty": "MEDIUM",
          "topic": "Benefits"
        }
      ],
      "quizQuestions": [
        {
          "difficulty": "EASY",
          "question": "What does STL stand for in C++?",
          "expectedAnswer": "A",
          "explanation": "`STL` stands for Standard Template Library.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Standard Template Library"
            },
            {
              "choiceLetter": "B",
              "content": "System Type List"
            },
            {
              "choiceLetter": "C",
              "content": "Standard Typing Logic"
            },
            {
              "choiceLetter": "D",
              "content": "Stream Template Layer"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "Which STL container stores elements in key-value pairs?",
          "expectedAnswer": "B",
          "explanation": "`map` stores key-value pairs.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "vector"
            },
            {
              "choiceLetter": "B",
              "content": "map"
            },
            {
              "choiceLetter": "C",
              "content": "set"
            },
            {
              "choiceLetter": "D",
              "content": "tuple"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "What header is required for `vector`?",
          "expectedAnswer": "C",
          "explanation": "Include `<vector>` for vector.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "<list>"
            },
            {
              "choiceLetter": "B",
              "content": "<set>"
            },
            {
              "choiceLetter": "C",
              "content": "<vector>"
            },
            {
              "choiceLetter": "D",
              "content": "<iostream>"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "Which method adds an element to a vector?",
          "expectedAnswer": "D",
          "explanation": "Use `push_back()` to add.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "insert()"
            },
            {
              "choiceLetter": "B",
              "content": "add()"
            },
            {
              "choiceLetter": "C",
              "content": "append()"
            },
            {
              "choiceLetter": "D",
              "content": "push_back()"
            }
          ]
        },
        {
          "difficulty": "EASY",
          "question": "Which STL container ensures no duplicate values?",
          "expectedAnswer": "C",
          "explanation": "`set` stores unique elements.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "vector"
            },
            {
              "choiceLetter": "B",
              "content": "map"
            },
            {
              "choiceLetter": "C",
              "content": "set"
            },
            {
              "choiceLetter": "D",
              "content": "list"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "What does `sort(nums.begin(), nums.end())` do?",
          "expectedAnswer": "A",
          "explanation": "It sorts the vector from beginning to end.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Sorts vector in ascending order"
            },
            {
              "choiceLetter": "B",
              "content": "Deletes vector"
            },
            {
              "choiceLetter": "C",
              "content": "Finds max value"
            },
            {
              "choiceLetter": "D",
              "content": "Reverses vector"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "Which iterator syntax accesses a `vector<int>`?",
          "expectedAnswer": "B",
          "explanation": "Correct STL iterator syntax.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "vector::iterator it"
            },
            {
              "choiceLetter": "B",
              "content": "vector<int>::iterator it"
            },
            {
              "choiceLetter": "C",
              "content": "int::vector"
            },
            {
              "choiceLetter": "D",
              "content": "vector<int> it"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "What does `find()` return if not found?",
          "expectedAnswer": "C",
          "explanation": "`find()` returns `container.end()` if not found.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "0"
            },
            {
              "choiceLetter": "B",
              "content": "-1"
            },
            {
              "choiceLetter": "C",
              "content": "end iterator"
            },
            {
              "choiceLetter": "D",
              "content": "null"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "How do you access the second element of a `pair`?",
          "expectedAnswer": "B",
          "explanation": "Use `.second` for the second item.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "p.first()"
            },
            {
              "choiceLetter": "B",
              "content": "p.second"
            },
            {
              "choiceLetter": "C",
              "content": "p[1]"
            },
            {
              "choiceLetter": "D",
              "content": "get<2>(p)"
            }
          ]
        },
        {
          "difficulty": "MEDIUM",
          "question": "What will `s.insert(10)` do for a set `s`?",
          "expectedAnswer": "A",
          "explanation": "`insert` only adds if not present.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Add 10 if not present"
            },
            {
              "choiceLetter": "B",
              "content": "Always add 10"
            },
            {
              "choiceLetter": "C",
              "content": "Duplicate 10"
            },
            {
              "choiceLetter": "D",
              "content": "Replace 10"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "Which header is required for `sort()` and `find()`?",
          "expectedAnswer": "D",
          "explanation": "STL algorithms are in `<algorithm>`.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "<vector>"
            },
            {
              "choiceLetter": "B",
              "content": "<map>"
            },
            {
              "choiceLetter": "C",
              "content": "<iostream>"
            },
            {
              "choiceLetter": "D",
              "content": "<algorithm>"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "Which STL container allows fast key lookup?",
          "expectedAnswer": "C",
          "explanation": "`map` provides fast key-based access.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "vector"
            },
            {
              "choiceLetter": "B",
              "content": "list"
            },
            {
              "choiceLetter": "C",
              "content": "map"
            },
            {
              "choiceLetter": "D",
              "content": "stack"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "What does `auto` keyword do in `auto it = nums.begin()`?",
          "expectedAnswer": "A",
          "explanation": "`auto` deduces the iterator type.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "Infers iterator type"
            },
            {
              "choiceLetter": "B",
              "content": "Creates a copy"
            },
            {
              "choiceLetter": "C",
              "content": "Declares float"
            },
            {
              "choiceLetter": "D",
              "content": "Allocates memory"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "How do you get the third item in a `tuple`?",
          "expectedAnswer": "D",
          "explanation": "Use `get<index>(tuple)` syntax.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "tuple[2]"
            },
            {
              "choiceLetter": "B",
              "content": "tuple.get(2)"
            },
            {
              "choiceLetter": "C",
              "content": "tuple.3"
            },
            {
              "choiceLetter": "D",
              "content": "get<2>(tuple)"
            }
          ]
        },
        {
          "difficulty": "HARD",
          "question": "What will this print?\n```cpp\nvector<int> v = {4, 1, 3};\nsort(v.begin(), v.end());\ncout << v[0];\n```",
          "expectedAnswer": "B",
          "explanation": "After sort, `v[0]` is the smallest: 1.",
          "quizChoices": [
            {
              "choiceLetter": "A",
              "content": "4"
            },
            {
              "choiceLetter": "B",
              "content": "1"
            },
            {
              "choiceLetter": "C",
              "content": "3"
            },
            {
              "choiceLetter": "D",
              "content": "undefined"
            }
          ]
        }
      ],
      "codingExercises": [
        {
          "title": "Use Vector to Store Integers",
          "task": "Read N integers into a `vector<int>` and print them in input order.",
          "starterCode": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    vector<int> v(n);\n    for (int i = 0; i < n; ++i) cin >> v[i];\n    // Your code here\n    return 0;\n}",
          "difficulty": "EASY",
          "testCases": [
            {
              "input": "3\n1 2 3",
              "output": "1 2 3 \n"
            },
            {
              "input": "1\n5",
              "output": "5 \n"
            },
            {
              "input": "2\n9 8",
              "output": "9 8 \n"
            },
            {
              "input": "4\n0 0 0 0",
              "output": "0 0 0 0 \n"
            },
            {
              "input": "3\n7 6 5",
              "output": "7 6 5 \n"
            }
          ],
          "hint": "Use a loop to read integers into a vector and then iterate to print them."
        },
        {
          "title": "Use Stack for Reverse Order",
          "task": "Read N integers and print them in reverse using `stack<int>`.",
          "starterCode": "#include <iostream>\n#include <stack>\nusing namespace std;\n\nint main() {\n    int n, x;\n    cin >> n;\n    stack<int> s;\n    while (n--) {\n        cin >> x;\n        s.push(x);\n    }\n    // Your code here\n    return 0;\n}",
          "difficulty": "EASY",
          "testCases": [
            {
              "input": "3\n1 2 3",
              "output": "3 2 1 \n"
            },
            {
              "input": "2\n10 20",
              "output": "20 10 \n"
            },
            {
              "input": "1\n5",
              "output": "5 \n"
            },
            {
              "input": "4\n4 3 2 1",
              "output": "1 2 3 4 \n"
            },
            {
              "input": "3\n7 8 9",
              "output": "9 8 7 \n"
            }
          ],
          "hint": "Push elements into the stack and pop them in a loop to reverse the order."
        },
        {
          "title": "Sort a Vector",
          "task": "Read integers into a `vector`, sort them in ascending order, and print them.",
          "starterCode": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    vector<int> v(n);\n    for (int i = 0; i < n; ++i) cin >> v[i];\n    // Your code here\n    return 0;\n}",
          "difficulty": "EASY",
          "testCases": [
            {
              "input": "3\n3 2 1",
              "output": "1 2 3 \n"
            },
            {
              "input": "4\n4 4 4 4",
              "output": "4 4 4 4 \n"
            },
            {
              "input": "2\n9 1",
              "output": "1 9 \n"
            },
            {
              "input": "5\n5 1 3 2 4",
              "output": "1 2 3 4 5 \n"
            },
            {
              "input": "3\n-1 0 1",
              "output": "-1 0 1 \n"
            }
          ],
          "hint": "Use `sort(v.begin(), v.end())` to sort the vector."
        },
        {
          "title": "Frequency Counter with Map",
          "task": "Read N integers and use `map<int, int>` to count and print frequency of each number.",
          "starterCode": "#include <iostream>\n#include <map>\nusing namespace std;\n\nint main() {\n    int n, x;\n    cin >> n;\n    map<int, int> freq;\n    while (n--) {\n        cin >> x;\n        // Your code here\n    }\n    return 0;\n}",
          "difficulty": "MEDIUM",
          "testCases": [
            {
              "input": "3\n1 2 1",
              "output": "1:2 2:1 \n"
            },
            {
              "input": "5\n5 5 5 5 5",
              "output": "5:5 \n"
            },
            {
              "input": "4\n1 2 3 4",
              "output": "1:1 2:1 3:1 4:1 \n"
            },
            {
              "input": "2\n0 0",
              "output": "0:2 \n"
            },
            {
              "input": "3\n3 3 2",
              "output": "2:1 3:2 \n"
            }
          ],
          "hint": "Use a map to count how many times each number appears while reading input."
        },
        {
          "title": "Using Set to Remove Duplicates",
          "task": "Read N integers, store them in a `set<int>` to eliminate duplicates, and print sorted result.",
          "starterCode": "#include <iostream>\n#include <set>\nusing namespace std;\n\nint main() {\n    int n, x;\n    cin >> n;\n    set<int> s;\n    while (n--) {\n        cin >> x;\n        s.insert(x);\n    }\n    // Your code here\n    return 0;\n}",
          "difficulty": "MEDIUM",
          "testCases": [
            {
              "input": "5\n1 2 3 2 1",
              "output": "1 2 3 \n"
            },
            {
              "input": "3\n5 5 5",
              "output": "5 \n"
            },
            {
              "input": "4\n7 8 7 6",
              "output": "6 7 8 \n"
            },
            {
              "input": "2\n1 1",
              "output": "1 \n"
            },
            {
              "input": "6\n4 4 3 2 2 1",
              "output": "1 2 3 4 \n"
            }
          ],
          "hint": "Insert each number into a set \u2014 it will automatically discard duplicates and keep sorted order."
        },
        {
          "title": "Queue Simulation",
          "task": "Simulate a queue of integers: push values in, then pop and print each one using `queue<int>`.",
          "starterCode": "#include <iostream>\n#include <queue>\nusing namespace std;\n\nint main() {\n    int n, x;\n    cin >> n;\n    queue<int> q;\n    while (n--) {\n        cin >> x;\n        q.push(x);\n    }\n    // Your code here\n    return 0;\n}",
          "difficulty": "MEDIUM",
          "testCases": [
            {
              "input": "3\n1 2 3",
              "output": "1 2 3 \n"
            },
            {
              "input": "1\n99",
              "output": "99 \n"
            },
            {
              "input": "4\n4 3 2 1",
              "output": "4 3 2 1 \n"
            },
            {
              "input": "2\n0 5",
              "output": "0 5 \n"
            },
            {
              "input": "3\n7 8 9",
              "output": "7 8 9 \n"
            }
          ],
          "hint": "Use `push()` to add to the queue and `front()`/`pop()` to retrieve and remove elements."
        },
        {
          "title": "Priority Queue Sorting",
          "task": "Use `priority_queue<int>` to read N integers and print them in descending order.",
          "starterCode": "#include <iostream>\n#include <queue>\nusing namespace std;\n\nint main() {\n    int n, x;\n    cin >> n;\n    priority_queue<int> pq;\n    while (n--) {\n        cin >> x;\n        pq.push(x);\n    }\n    // Your code here\n    return 0;\n}",
          "difficulty": "HARD",
          "testCases": [
            {
              "input": "5\n1 2 3 4 5",
              "output": "5 4 3 2 1 \n"
            },
            {
              "input": "3\n9 1 6",
              "output": "9 6 1 \n"
            },
            {
              "input": "4\n5 5 5 5",
              "output": "5 5 5 5 \n"
            },
            {
              "input": "2\n-1 -2",
              "output": "-1 -2 \n"
            },
            {
              "input": "6\n6 5 4 3 2 1",
              "output": "6 5 4 3 2 1 \n"
            }
          ],
          "hint": "A max-heap priority queue automatically stores the highest element on top."
        },
        {
          "title": "Pair Usage in Vector",
          "task": "Read N pairs of integers, store them in `vector<pair<int,int>>`, and print each pair.",
          "starterCode": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    int n, a, b;\n    cin >> n;\n    vector<pair<int,int>> vp;\n    while (n--) {\n        cin >> a >> b;\n        vp.push_back({a, b});\n    }\n    // Your code here\n    return 0;\n}",
          "difficulty": "HARD",
          "testCases": [
            {
              "input": "2\n1 2\n3 4",
              "output": "1 2\n3 4\n"
            },
            {
              "input": "1\n10 20",
              "output": "10 20\n"
            },
            {
              "input": "3\n0 0\n1 1\n2 2",
              "output": "0 0\n1 1\n2 2\n"
            },
            {
              "input": "2\n-1 -2\n3 4",
              "output": "-1 -2\n3 4\n"
            },
            {
              "input": "4\n5 6\n7 8\n9 0\n1 2",
              "output": "5 6\n7 8\n9 0\n1 2\n"
            }
          ],
          "hint": "Store pairs using `make_pair()` or `{a, b}` syntax inside the vector."
        },
        {
          "title": "Map of Strings to Integers",
          "task": "Read N lines of a string and integer, store them in `map<string, int>`, then print sorted keys and values.",
          "starterCode": "#include <iostream>\n#include <map>\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    map<string, int> m;\n    while (n--) {\n        string s;\n        int x;\n        cin >> s >> x;\n        m[s] = x;\n    }\n    // Your code here\n    return 0;\n}",
          "difficulty": "HARD",
          "testCases": [
            {
              "input": "2\nAlice 1\nBob 2",
              "output": "Alice:1\nBob:2\n"
            },
            {
              "input": "3\nb 2\na 1\nc 3",
              "output": "a:1\nb:2\nc:3\n"
            },
            {
              "input": "1\nx 10",
              "output": "x:10\n"
            },
            {
              "input": "2\nkey 99\nvalue 100",
              "output": "key:99\nvalue:100\n"
            },
            {
              "input": "3\nz 9\ny 8\nx 7",
              "output": "x:7\ny:8\nz:9\n"
            }
          ],
          "hint": "Maps sort keys automatically. Insert each string-int pair and iterate using a for loop."
        }
      ]
    }
  ]
}
